<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-08-31T23:16:26+09:00</updated><id>http://localhost:4000/</id><title type="html">Rocky’s Research Blog</title><subtitle>This is a Research Blog of Rocky Lim</subtitle><entry><title type="html">RocksDB and LSM-TREE BACKGROUND</title><link href="http://localhost:4000/whatever/LSMTREE/" rel="alternate" type="text/html" title="RocksDB and LSM-TREE BACKGROUND" /><published>2018-06-27T19:00:00+09:00</published><updated>2018-06-27T19:00:00+09:00</updated><id>http://localhost:4000/whatever/LSMTREE</id><content type="html" xml:base="http://localhost:4000/whatever/LSMTREE/">&lt;h1 id=&quot;lsm-tree-background&quot;&gt;LSM-Tree Background&lt;/h1&gt;

&lt;p&gt;LSM-TREE에 데이터가 써질 때 마다, in-memory write buffer인 &lt;em&gt;mem-table&lt;/em&gt; 에 더해진다. &lt;em&gt;mem-table&lt;/em&gt; 은 skiplist로 구현되어 있으며, insert와 search에 log(n)의 복잡도를 갖는다. 이와 동시에, recovery를 위해 data는 Write Ahead Log(WAL)에 append 된다. &lt;em&gt;mem-table&lt;/em&gt;이 어느정도 크기 이상으로 커지면, 지금까지 데이터가 써 지던 &lt;em&gt;mem-table&lt;/em&gt; 과 WAL은 &lt;strong&gt;immutable&lt;/strong&gt;해 지고, 새로운 &lt;em&gt;mem-table&lt;/em&gt;과 WAL이 할당되어 이어지는 write request를 처리한다. 기존의 &lt;em&gt;mem-table&lt;/em&gt; contents는 Level-0의 “&lt;em&gt;Sorted Sequence Table&lt;/em&gt;” (SST) data file에 flush 된다. flush 후 기존의 &lt;em&gt;mem-table&lt;/em&gt;과 WAL은 discard된다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;http://localhost:4000/images/lsm_1.png &quot; alt=&quot;Drawing&quot; style=&quot;width: 400;&quot; /&gt;
  &lt;img src=&quot;http://localhost:4000/images/lsm_2.png &quot; alt=&quot;Drawing&quot; style=&quot;width: 400;&quot; /&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  SST ﬁle organization &amp;amp; Compaction
&lt;/p&gt;

&lt;p&gt;SST들은 데이터를 정렬된 순서의 data block으로 가지고 있다. SST 파일은 data block 마다 index를 가지고 있으며 이 index entry는 SST 파일의 index block에 저장된다. level-0의 SST file의 수가 정해진 threshold를 넘으면, Level-0의 SST file들은 같은 level-1 SST 또는 level-1 SST와 merge된다(겹치는 key값의 범위를 가지고 있는 애들끼리). 즉, merge sort의 input으로 level-0 또는 level-1  SST 파일이 들어가 이들은 삭제 되고 merge sort의 결과로 level-1 file이 생성된다.&lt;/p&gt;</content><author><name>Rocky Lim</name><email>rockylim@snu.ac.kr</email><uri>https://rockylim92.github.io/</uri></author><summary type="html">LSM Tree data structure basic, RocksDB storage banckend</summary></entry><entry><title type="html">InnoDB basic and i/o path</title><link href="http://localhost:4000/research/innodb_01/" rel="alternate" type="text/html" title="InnoDB basic and i/o path" /><published>2018-03-01T19:00:00+09:00</published><updated>2018-03-01T19:00:00+09:00</updated><id>http://localhost:4000/research/innodb_01</id><content type="html" xml:base="http://localhost:4000/research/innodb_01/">&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-innodb-background&quot; id=&quot;markdown-toc-1-innodb-background&quot;&gt;1. InnoDB background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-innodb-function-call-tracefunction-call-stack&quot; id=&quot;markdown-toc-2-innodb-function-call-tracefunction-call-stack&quot;&gt;2. InnoDB Function Call Trace(Function Call Stack)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#pread&quot; id=&quot;markdown-toc-pread&quot;&gt;pread&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pwrite&quot; id=&quot;markdown-toc-pwrite&quot;&gt;pwrite&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h1 id=&quot;1-innodb-background&quot;&gt;1. InnoDB background&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;InnoDB - Default storage engine of MySQL DB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;InnoDB tables arrange your data on disk to optimize queries based on primary keys. Each InnoDB table has a primary key index called the clustered index that organizes the data to minimize I/O for primary key lookups&lt;/p&gt;

&lt;p&gt;Inserts, updates, and deletes are optimized by an automatic mechanism called change buffering. InnoDB not only allows concurrent read and write access to the same table, it caches changed data to streamline disk I/O.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;file-per-table&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A general name for the setting controlled by the &lt;em&gt;innodb_file_per_table&lt;/em&gt; option, which is an important configuration option that affects aspects of InnoDB file storage, availability of features, and I/O characteristics. As of MySQL 5.6.7, &lt;em&gt;innodb_file_per_table&lt;/em&gt; is enabled by default.&lt;/p&gt;

&lt;p&gt;With the &lt;em&gt;innodb_file_per_table&lt;/em&gt; option enabled, you can create a table in its own &lt;strong&gt;.ibd file&lt;/strong&gt; rather than in the shared &lt;strong&gt;ibdata files&lt;/strong&gt; of the &lt;strong&gt;system tablespace&lt;/strong&gt;. When table data is stored in an individual &lt;strong&gt;.ibd file&lt;/strong&gt;, you have more flexibility to choose &lt;strong&gt;row formats&lt;/strong&gt; required for features such as data &lt;strong&gt;compression&lt;/strong&gt;. The TRUNCATE TABLE operation is also faster, and reclaimed space can be used by the operating system rather than remaining reserved for InnoDB.&lt;/p&gt;

&lt;p&gt;You can monitor the internal workings of the storage engine by querying &lt;strong&gt;INFORMATION_SCHEMA&lt;/strong&gt; tables.&lt;/p&gt;

&lt;p&gt;You can monitor the performance details of the storage engine by querying &lt;strong&gt;Performance Schema&lt;/strong&gt; tables.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;system tablespace&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One or more data files (&lt;strong&gt;ibdata files&lt;/strong&gt;) containing metadata for InnoDB-related objects (&lt;strong&gt;the InnoDB data dictionary&lt;/strong&gt;), and the storage areas for the &lt;strong&gt;change buffer&lt;/strong&gt;, the &lt;strong&gt;doublewrite buffer&lt;/strong&gt;, and possibly &lt;strong&gt;undo logs&lt;/strong&gt;. It may also contain table and index data for InnoDB tables if tables were created in the system tablespace instead of &lt;strong&gt;file-per-table&lt;/strong&gt; or &lt;strong&gt;general tablespaces&lt;/strong&gt;. The data and metadata in the system tablespace apply to all &lt;strong&gt;databases&lt;/strong&gt; in a MySQL &lt;strong&gt;instance&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In MySQL 5.7, the default is &lt;strong&gt;&lt;em&gt;file-per-table mode&lt;/em&gt;&lt;/strong&gt;, where each table and its associated indexes are stored in a separate &lt;strong&gt;&lt;em&gt;.ibd file&lt;/em&gt;&lt;/strong&gt;. This default makes it easier to use InnoDB features that rely on the Barracuda file format, such as table compression, efficient storage of off-page columns, and large index key prefixes (innodb_large_prefix).&lt;/p&gt;

&lt;h1 id=&quot;2-innodb-function-call-tracefunction-call-stack&quot;&gt;2. InnoDB Function Call Trace(Function Call Stack)&lt;/h1&gt;

&lt;p&gt;The following function call trace comes from &lt;strong&gt;gdb&lt;/strong&gt; while processing tpcc-h workload. I sampled from start points of i/o thread  to &lt;strong&gt;pread&lt;/strong&gt; and &lt;strong&gt;pwrite&lt;/strong&gt; systeam call(the end of mysql layer).&lt;/p&gt;

&lt;h2 id=&quot;pread&quot;&gt;pread&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#0  pread64 () at ../sysdeps/unix/syscall-template.S:84
#1  0x0000000001ab1d0f in SyncFileIO::execute (this=0x7f7f2c0d1500, request=...) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:2185
#2  0x0000000001ab442d in os_file_io (in_type=..., file=47, buf=0x7f7f247dc000, n=16384, offset=24133632, err=0x7f7f2c0d1904) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5445
#3  0x0000000001ab4ea1 in os_file_pread (type=..., file=47, buf=0x7f7f247dc000, n=16384, offset=24133632, err=0x7f7f2c0d1904) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5627
#4  0x0000000001ab504b in os_file_read_page (type=..., file=47, buf=0x7f7f247dc000, offset=24133632, n=16384, o=0x0, exit_on_err=true) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5666
#5  0x0000000001ab5ebd in os_file_read_func (type=..., file=47, buf=0x7f7f247dc000, offset=24133632, n=16384) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:6058
#6  0x0000000001ab8230 in os_aio_func (type=..., mode=24, name=0x418fb98 &quot;./tpcc1000/customer.ibd&quot;, file=..., buf=0x7f7f247dc000, offset=24133632, n=16384, read_only=false, m1=0x418fab8, m2=0x7f7f1fd3b398) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:7465
#7  0x0000000001d24f3b in pfs_os_aio_func (type=..., mode=24, name=0x418fb98 &quot;./tpcc1000/customer.ibd&quot;, file=..., buf=0x7f7f247dc000, offset=24133632, n=16384, read_only=false,  m1=0x418fab8, m2=0x7f7f1fd3b398, src_file=0x243c520 &quot;/home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc&quot;, src_line=5781) at /home/rocky/mysql-5.7.22/storage/innobase/include/os0file.ic:261
#8  0x0000000001d3671a in fil_io (type=..., sync=true, page_id=..., page_size=..., byte_offset=0, len=16384, buf=0x7f7f247dc000, message=0x7f7f1fd3b398) at /home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc:5781
#9  0x0000000001cce2ad in buf_read_page_low (err=0x7f7f2c0d2474, sync=true, type=0, mode=132, page_id=..., page_size=..., unzip=false) at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0rea.cc:193
#10 0x0000000001ccecf5 in buf_read_page (page_id=..., page_size=...) at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0rea.cc:447
#11 0x0000000001ca2b7a in buf_page_get_gen (page_id=..., page_size=..., rw_latch=1, guess=0x0, mode=10, file=0x23e6d10 &quot;/home/rocky/mysql-5.7.22/storage/innobase/row/row0sel.cc&quot;, line=3518, mtr=0x7f7f2c0d4770, dirty_with_no_latch=false) at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0buf.cc:4201
#12 0x0000000001c6877d in btr_cur_search_to_nth_level (index=0x7f7eb41ce6a0, level=0, tuple=0x7f7eb4b14d98, mode=PAGE_CUR_LE, latch_mode=1, cursor=0x7f7eb4b147d8, has_search_latch=0, file=0x23e6d10 &quot;/home/rocky/mysql-5.7.22/storage/innobase/row/row0sel.cc&quot;, line=3518, mtr=0x7f7f2c0d4770) at /home/rocky/mysql-5.7.22/storage/innobase/btr/btr0cur.cc:1109
#13 0x0000000001b8271d in btr_pcur_open_with_no_init_func (index=0x7f7eb41ce6a0, tuple=0x7f7eb4b14d98, mode=PAGE_CUR_LE, latch_mode=1, cursor=0x7f7eb4b147d8, has_search_latch=0, file=0x23e6d10 &quot;/home/rocky/mysql-5.7.22/storage/innobase/row/row0sel.cc&quot;, line=3518, mtr=0x7f7f2c0d4770) at /home/rocky/mysql-5.7.22/storage/innobase/include/btr0pcur.ic:521
#14 0x0000000001b8a5a9 in row_sel_get_clust_rec_for_mysql (prebuilt=0x7f7eb4b144c0, sec_index=0x7f7eb41cf260, rec=0x7f7f20e08adc &quot;\200\002\203PRESABLEESEjI2hiwAAWrsy\200&quot;, thr=0x7f7eb4b14ff0, out_rec=0x7f7f2c0d3bb0, offsets=0x7f7f2c0d3bd0, offset_heap=0x7f7f2c0d3bc8, vrow=0x0, mtr=0x7f7f2c0d4770) at /home/rocky/mysql-5.7.22/storage/innobase/row/row0sel.cc:3518
#15 0x0000000001b8f964 in row_search_mvcc (buf=0x7f7eb41bfec0 &quot;&quot;, mode=PAGE_CUR_GE, prebuilt=0x7f7eb4b144c0, match_mode=1, direction=0) at /home/rocky/mysql-5.7.22/storage/innobase/row/row0sel.cc:5769
#16 0x00000000019ea5fa in ha_innobase::index_read (this=0x7f7eb4013590, buf=0x7f7eb41bfec0 &quot;&quot;, key_ptr=0x7f7eb40109b8 &quot;\002&quot;, key_len=54, find_flag=HA_READ_KEY_EXACT) at /home/rocky/mysql-5.7.22/storage/innobase/handler/ha_innodb.cc:8708
#17 0x0000000000fd150e in handler::index_read_map (this=0x7f7eb4013590, buf=0x7f7eb41bfec0 &quot;&quot;, key=0x7f7eb40109b8 &quot;\002&quot;, keypart_map=7, find_flag=HA_READ_KEY_EXACT) at /home/rocky/mysql-5.7.22/sql/handler.h:2785
#18 0x0000000000fc22a7 in handler::ha_index_read_map (this=0x7f7eb4013590, buf=0x7f7eb41bfec0 &quot;&quot;, key=0x7f7eb40109b8 &quot;\002&quot;, keypart_map=7, find_flag=HA_READ_KEY_EXACT) at /home/rocky/mysql-5.7.22/sql/handler.cc:3031
#19 0x00000000015f571f in join_read_always_key (tab=0x7f7eb4be0ec8) at /home/rocky/mysql-5.7.22/sql/sql_executor.cc:2424
#20 0x00000000015f306b in sub_select (join=0x7f7eb400eee8, qep_tab=0x7f7eb4be0ec8, end_of_records=false) at /home/rocky/mysql-5.7.22/sql/sql_executor.cc:1434
#21 0x00000000015f297e in do_select (join=0x7f7eb400eee8) at /home/rocky/mysql-5.7.22/sql/sql_executor.cc:1107
#22 0x00000000015f0760 in JOIN::exec (this=0x7f7eb400eee8) at /home/rocky/mysql-5.7.22/sql/sql_executor.cc:356
#23 0x0000000001693116 in handle_query (thd=0x7f7eb4000950, lex=0x7f7eb4b38970, result=0x7f7eb4b3c8c8, added_options=0, removed_options=0) at /home/rocky/mysql-5.7.22/sql/sql_select.cc:184
#24 0x0000000001642fc4 in execute_sqlcom_select (thd=0x7f7eb4000950, all_tables=0x7f7eb4b3ba80) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:5309
#25 0x000000000163c02b in mysql_execute_command (thd=0x7f7eb4000950, first_level=true) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:2945
#26 0x000000000167f4ce in Prepared_statement::execute (this=0x7f7eb4b385c0, expanded_query=0x7f7f2c0d63e0, open_cursor=false) at /home/rocky/mysql-5.7.22/sql/sql_prepare.cc:3955
#27 0x000000000167e30c in Prepared_statement::execute_loop (this=0x7f7eb4b385c0, expanded_query=0x7f7f2c0d63e0, open_cursor=false, packet=0x7f7eb40153da &quot;def\btpcc1000\bcustomer\bcustomer\tc_balance\tc_balance\f?&quot;, packet_end=0x7f7eb40153f6 &quot;er\tc_balance\tc_balance\f?&quot;) at /home/rocky/mysql-5.7.22/sql/sql_prepare.cc:3563
#28 0x000000000167ba79 in mysqld_stmt_execute (thd=0x7f7eb4000950, stmt_id=22, flags=0, params=0x7f7eb40153da &quot;def\btpcc1000\bcustomer\bcustomer\tc_balance\tc_balance\f?&quot;, params_length=28) at /home/rocky/mysql-5.7.22/sql/sql_prepare.cc:2551
#29 0x0000000001638977 in dispatch_command (thd=0x7f7eb4000950, com_data=0x7f7f2c0d6e00, command=COM_STMT_EXECUTE) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:1544
#30 0x0000000001637b1e in do_command (thd=0x7f7eb4000950) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:1148
#31 0x000000000177b5d5 in handle_connection (arg=0x4282990) at /home/rocky/mysql-5.7.22/sql/conn_handler/connection_handler_per_thread.cc:300
#32 0x0000000001dfe398 in pfs_spawn_thread (arg=0x41f37d0) at /home/rocky/mysql-5.7.22/storage/perfschema/pfs.cc:2190
#33 0x00007f7f375496ba in start_thread (arg=0x7f7f2c0d7700) at pthread_create.c:333
#34 0x00007f7f369de41d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#0  pread64 () at ../sysdeps/unix/syscall-template.S:84
#1  0x0000000001ab1d0f in SyncFileIO::execute (this=0x7f7f2c0d1380, request=...) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:2185
#2  0x0000000001ab442d in os_file_io (in_type=..., file=49, buf=0x7f7f247e8000, n=16384, offset=2048000, err=0x7f7f2c0d1784) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5445
#3  0x0000000001ab4ea1 in os_file_pread (type=..., file=49, buf=0x7f7f247e8000, n=16384, offset=2048000, err=0x7f7f2c0d1784) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5627
#4  0x0000000001ab504b in os_file_read_page (type=..., file=49, buf=0x7f7f247e8000, offset=2048000, n=16384, o=0x0, exit_on_err=true) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5666
#5  0x0000000001ab5ebd in os_file_read_func (type=..., file=49, buf=0x7f7f247e8000, offset=2048000, n=16384) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:6058
#6  0x0000000001ab8230 in os_aio_func (type=..., mode=24, name=0x4191248 &quot;./tpcc1000/orders.ibd&quot;, file=..., buf=0x7f7f247e8000, offset=2048000, n=16384, read_only=false, m1=0x4192408, m2=0x7f7f1fd3bd10) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:7465
#7  0x0000000001d24f3b in pfs_os_aio_func (type=..., mode=24, name=0x4191248 &quot;./tpcc1000/orders.ibd&quot;, file=..., buf=0x7f7f247e8000, offset=2048000, n=16384, read_only=false, m1=0x4192408, m2=0x7f7f1fd3bd10, src_file=0x243c520 &quot;/home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc&quot;, src_line=5781) at /home/rocky/mysql-5.7.22/storage/innobase/include/os0file.ic:261
#8  0x0000000001d3671a in fil_io (type=..., sync=true, page_id=..., page_size=..., byte_offset=0, len=16384, buf=0x7f7f247e8000, message=0x7f7f1fd3bd10) at /home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc:5781
#9  0x0000000001cce2ad in buf_read_page_low (err=0x7f7f2c0d22f4, sync=true, type=0, mode=132, page_id=..., page_size=..., unzip=false) at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0rea.cc:193
#10 0x0000000001ccecf5 in buf_read_page (page_id=..., page_size=...) at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0rea.cc:447
#11 0x0000000001ca2b7a in buf_page_get_gen (page_id=..., page_size=..., rw_latch=1, guess=0x0, mode=10, file=0x23e6d10 &quot;/home/rocky/mysql-5.7.22/storage/innobase/row/row0sel.cc&quot;, line=4066, mtr=0x7f7f2c0d43d0, dirty_with_no_latch=false) at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0buf.cc:4201
#12 0x0000000001c6877d in btr_cur_search_to_nth_level (index=0x7f7eb41d44c0, level=0, tuple=0x7f7eb4b281a8, mode=PAGE_CUR_GE, latch_mode=1, cursor=0x7f7eb4b27fb8, has_search_latch=1, file=0x23e6d10 &quot;/home/rocky/mysql-5.7.22/storage/innobase/row/row0sel.cc&quot;, line=4066, mtr=0x7f7f2c0d43d0) at /home/rocky/mysql-5.7.22/storage/innobase/btr/btr0cur.cc:1109
#13 0x0000000001b8271d in btr_pcur_open_with_no_init_func (index=0x7f7eb41d44c0, tuple=0x7f7eb4b281a8, mode=PAGE_CUR_GE, latch_mode=1, cursor=0x7f7eb4b27fb8, has_search_latch=1, file=0x23e6d10 &quot;/home/rocky/mysql-5.7.22/storage/innobase/row/row0sel.cc&quot;, line=4066, mtr=0x7f7f2c0d43d0) at /home/rocky/mysql-5.7.22/storage/innobase/include/btr0pcur.ic:521
#14 0x0000000001b8b92f in row_sel_try_search_shortcut_for_mysql (out_rec=0x7f7f2c0d37f8, prebuilt=0x7f7eb4b27d90, offsets=0x7f7f2c0d3830, heap=0x7f7f2c0d3828, mtr=0x7f7f2c0d43d0) at /home/rocky/mysql-5.7.22/storage/innobase/row/row0sel.cc:4066
#15 0x0000000001b8d728 in row_search_mvcc (buf=0x7f7eb4b273e0 '\217' &amp;lt;repeats 48 times&amp;gt;, mode=PAGE_CUR_GE, prebuilt=0x7f7eb4b27d90, match_mode=1, direction=0) at /home/rocky/mysql-5.7.22/storage/innobase/row/row0sel.cc:4878
#16 0x00000000019ea5fa in ha_innobase::index_read (this=0x7f7eb4b270f0, buf=0x7f7eb4b273e0 '\217' &amp;lt;repeats 48 times&amp;gt;, key_ptr=0x7f7eb4010b88 &quot;\002&quot;, key_len=7, find_flag=HA_READ_KEY_EXACT) at /home/rocky/mysql-5.7.22/storage/innobase/handler/ha_innodb.cc:8708
#17 0x0000000000fd150e in handler::index_read_map (this=0x7f7eb4b270f0, buf=0x7f7eb4b273e0 '\217' &amp;lt;repeats 48 times&amp;gt;, key=0x7f7eb4010b88 &quot;\002&quot;, keypart_map=7, find_flag=HA_READ_KEY_EXACT) at /home/rocky/mysql-5.7.22/sql/handler.h:2785
#18 0x0000000000fcd11d in handler::index_read_idx_map (this=0x7f7eb4b270f0, buf=0x7f7eb4b273e0 '\217' &amp;lt;repeats 48 times&amp;gt;, index=0, key=0x7f7eb4010b88 &quot;\002&quot;, keypart_map=7, find_flag=HA_READ_KEY_EXACT) at /home/rocky/mysql-5.7.22/sql/handler.cc:7519
#19 0x0000000000fc29ec in handler::ha_index_read_idx_map (this=0x7f7eb4b270f0, buf=0x7f7eb4b273e0 '\217' &amp;lt;repeats 48 times&amp;gt;, index=0, key=0x7f7eb4010b88 &quot;\002&quot;, keypart_map=7, find_flag=HA_READ_KEY_EXACT) at /home/rocky/mysql-5.7.22/sql/handler.cc:3083
#20 0x00000000015f4d24 in read_const (table=0x7f7eb4b26740, ref=0x7f7eb400ff38) at /home/rocky/mysql-5.7.22/sql/sql_executor.cc:2174
#21 0x00000000015f47da in join_read_const_table (tab=0x7f7eb400fe68, pos=0x7f7eb4010000) at /home/rocky/mysql-5.7.22/sql/sql_executor.cc:2059
#22 0x0000000001621eee in JOIN::extract_func_dependent_tables (this=0x7f7eb400f120) at /home/rocky/mysql-5.7.22/sql/sql_optimizer.cc:5580
#23 0x00000000016208c0 in JOIN::make_join_plan (this=0x7f7eb400f120) at /home/rocky/mysql-5.7.22/sql/sql_optimizer.cc:5044
#24 0x00000000016148cf in JOIN::optimize (this=0x7f7eb400f120) at /home/rocky/mysql-5.7.22/sql/sql_optimizer.cc:368
#25 0x0000000001694c5b in st_select_lex::optimize (this=0x7f7eb4b460e8, thd=0x7f7eb4000950) at /home/rocky/mysql-5.7.22/sql/sql_select.cc:1009
#26 0x00000000016930a0 in handle_query (thd=0x7f7eb4000950, lex=0x7f7eb4b45130, result=0x7f7eb4b4be48, added_options=0, removed_options=0) at /home/rocky/mysql-5.7.22/sql/sql_select.cc:164
#27 0x0000000001642fc4 in execute_sqlcom_select (thd=0x7f7eb4000950, all_tables=0x7f7eb4b492f0) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:5309
#28 0x000000000163c02b in mysql_execute_command (thd=0x7f7eb4000950, first_level=true) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:2945
#29 0x000000000167f4ce in Prepared_statement::execute (this=0x7f7eb4b44d80, expanded_query=0x7f7f2c0d63e0, open_cursor=false) at /home/rocky/mysql-5.7.22/sql/sql_prepare.cc:3955
#30 0x000000000167e30c in Prepared_statement::execute_loop (this=0x7f7eb4b44d80, expanded_query=0x7f7f2c0d63e0, open_cursor=false, packet=0x7f7eb40153da &quot;&quot;, packet_end=0x7f7eb4015400 &quot;&quot;) at /home/rocky/mysql-5.7.22/sql/sql_prepare.cc:3563
#31 0x000000000167ba79 in mysqld_stmt_execute (thd=0x7f7eb4000950, stmt_id=24, flags=0, params=0x7f7eb40153da &quot;&quot;, params_length=38) at /home/rocky/mysql-5.7.22/sql/sql_prepare.cc:2551
#32 0x0000000001638977 in dispatch_command (thd=0x7f7eb4000950, com_data=0x7f7f2c0d6e00, command=COM_STMT_EXECUTE) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:1544
#33 0x0000000001637b1e in do_command (thd=0x7f7eb4000950) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:1148
#34 0x000000000177b5d5 in handle_connection (arg=0x4282990) at /home/rocky/mysql-5.7.22/sql/conn_handler/connection_handler_per_thread.cc:300
#35 0x0000000001dfe398 in pfs_spawn_thread (arg=0x41f37d0) at /home/rocky/mysql-5.7.22/storage/perfschema/pfs.cc:2190
#36 0x00007f7f375496ba in start_thread (arg=0x7f7f2c0d7700) at pthread_create.c:333
#37 0x00007f7f369de41d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;or
.
.
.&lt;/p&gt;

&lt;h2 id=&quot;pwrite&quot;&gt;pwrite&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pwrite
# SyncFileIO::execute
# os_file_io
#0  os_file_pwrite (type=..., file=3, buf=0x7f59d19af200 &quot;\200\037y\276\002&quot;, n=1024, offset=49545216, err=0x7f59c67fb38c) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5536
#1  0x0000000001ab4ae7 in os_file_write_page (type=..., name=0x54bc148 &quot;./ib_logfile0&quot;, file=3, buf=0x7f59d19af200 &quot;\200\037y\276\002&quot;, offset=49545216, n=1024)
at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5573
#2  0x0000000001ab600e in os_file_write_func (type=..., name=0x54bc148 &quot;./ib_logfile0&quot;, file=3, buf=0x7f59d19af200, offset=49545216, n=1024) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:6115
#3  0x0000000001ab828b in os_aio_func (type=..., mode=24, name=0x54bc148 &quot;./ib_logfile0&quot;, file=..., buf=0x7f59d19af200, offset=49545216, n=1024, read_only=false, m1=0x54bc068, m2=0x54bc3c8)
at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:7471
#4  0x0000000001d24f3b in pfs_os_aio_func (type=..., mode=24, name=0x54bc148 &quot;./ib_logfile0&quot;, file=..., buf=0x7f59d19af200, offset=49545216, n=1024, read_only=false, m1=0x54bc068, m2=0x54bc3c8, src_file=0x243c520 &quot;/home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc&quot;, src_line=5781) at /home/rocky/mysql-5.7.22/storage/innobase/include/os0file.ic:261
#5  0x0000000001d3671a in fil_io (type=..., sync=true, page_id=..., page_size=..., byte_offset=0, len=1024, buf=0x7f59d19af200, message=0x54bc3c8) at /home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc:5781
#6  0x0000000001a8d548 in log_group_write_buf (group=0x54bc3c8, buf=0x7f59d19af200 &quot;\200\037y\276\002&quot;, len=1024, pad_len=0, start_lsn=1056143872, new_data_offset=300) at /home/rocky/mysql-5.7.22/storage/innobase/log/log0log.cc:1124
#7  0x0000000001a8e144 in log_write_up_to (lsn=1056144429, flush_to_disk=true) at /home/rocky/mysql-5.7.22/storage/innobase/log/log0log.cc:1389
#8  0x0000000001a8f5ca in log_checkpoint (sync=true, write_always=false) at /home/rocky/mysql-5.7.22/storage/innobase/log/log0log.cc:1844
#9  0x0000000001bc8c86 in srv_master_do_idle_tasks () at /home/rocky/mysql-5.7.22/storage/innobase/srv/srv0srv.cc:2249
#10 0x0000000001bc910d in srv_master_thread (arg=0x0) at /home/rocky/mysql-5.7.22/storage/innobase/srv/srv0srv.cc:2385
#11 0x00007f59ea9cf6ba in start_thread (arg=0x7f59c67fc700) at pthread_create.c:333
#12 0x00007f59e9e6441d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pwrite
# SyncFileIO::execute
# os_file_io
#0  os_file_pwrite (type=..., file=3, buf=0x7f59d29af200 &quot;\200\037y\274\002&quot;, n=1024, offset=49544192, err=0x7f59c67fb37c) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5536
#1  0x0000000001ab4ae7 in os_file_write_page (type=..., name=0x54bc148 &quot;./ib_logfile0&quot;, file=3, buf=0x7f59d29af200 &quot;\200\037y\274\002&quot;, offset=49544192, n=1024)
at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5573
#2  0x0000000001ab600e in os_file_write_func (type=..., name=0x54bc148 &quot;./ib_logfile0&quot;, file=3, buf=0x7f59d29af200, offset=49544192, n=1024) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:6115
#3  0x0000000001ab828b in os_aio_func (type=..., mode=24, name=0x54bc148 &quot;./ib_logfile0&quot;, file=..., buf=0x7f59d29af200, offset=49544192, n=1024, read_only=false, m1=0x54bc068, m2=0x54bc3c8)
at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:7471
#4  0x0000000001d24f3b in pfs_os_aio_func (type=..., mode=24, name=0x54bc148 &quot;./ib_logfile0&quot;, file=..., buf=0x7f59d29af200, offset=49544192, n=1024, read_only=false, m1=0x54bc068, m2=0x54bc3c8, src_file=0x243c520 &quot;/home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc&quot;, src_line=5781) at /home/rocky/mysql-5.7.22/storage/innobase/include/os0file.ic:261
#5  0x0000000001d3671a in fil_io (type=..., sync=true, page_id=..., page_size=..., byte_offset=15360, len=1024,  buf=0x7f59d29af200, message=0x54bc3c8) at /home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc:5781
#6  0x0000000001a8d548 in log_group_write_buf (group=0x54bc3c8, buf=0x7f59d29af200 &quot;\200\037y\274\002&quot;, len=1024, pad_len=0, start_lsn=1056142848, new_data_offset=477) at /home/rocky/mysql-5.7.22/storage/innobase/log/log0log.cc:1124
#7  0x0000000001a8e144 in log_write_up_to (lsn=1056143561, flush_to_disk=true) at /home/rocky/mysql-5.7.22/storage/innobase/log/log0log.cc:1389
#8  0x0000000001a8e307 in log_buffer_sync_in_background (flush=true) at /home/rocky/mysql-5.7.22/storage/innobase/log/log0log.cc:1447
#9  0x0000000001bc7f25 in srv_sync_log_buffer_in_background () at /home/rocky/mysql-5.7.22/storage/innobase/srv/srv0srv.cc:1965
#10 0x0000000001bc8bd3 in srv_master_do_idle_tasks () at /home/rocky/mysql-5.7.22/storage/innobase/srv/srv0srv.cc:2239
#11 0x0000000001bc910d in srv_master_thread (arg=0x0) at /home/rocky/mysql-5.7.22/storage/innobase/srv/srv0srv.cc:2385
#12 0x00007f59ea9cf6ba in start_thread (arg=0x7f59c67fc700) at pthread_create.c:333
#13 0x00007f59e9e6441d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pwrite
# SyncFileIO::execute
# os_file_io
#0  os_file_pwrite (type=..., file=9, buf=0x7f59e03a0000 &quot;2\257\224&quot;, &amp;lt;incomplete sequence \343&amp;gt;, n=1048576, offset=1048576, err=0x7f59cd1a41dc) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5536
#1  0x0000000001ab4ae7 in os_file_write_page (type=..., name=0x54bbac8 &quot;./ibdata1&quot;, file=9, buf=0x7f59e03a0000 &quot;2\257\224&quot;, &amp;lt;incomplete sequence \343&amp;gt;, offset=1048576, n=1048576)
at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5573
#2  0x0000000001ab600e in os_file_write_func (type=..., name=0x54bbac8 &quot;./ibdata1&quot;, file=9, buf=0x7f59e03a0000, offset=1048576, n=1048576) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:6115
#3  0x0000000001ab828b in os_aio_func (type=..., mode=24, name=0x54bbac8 &quot;./ibdata1&quot;, file=..., buf=0x7f59e03a0000,,offset=1048576, n=1048576, read_only=false, m1=0x54bb9e8, m2=0x0) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:7471
#4  0x0000000001d24f3b in pfs_os_aio_func (type=..., mode=24, name=0x54bbac8 &quot;./ibdata1&quot;, file=..., buf=0x7f59e03a0000, offset=1048576, n=1048576, read_only=false, m1=0x54bb9e8, m2=0x0, src_file=0x243c520 &quot;/home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc&quot;, src_line=5781) at /home/rocky/mysql-5.7.22/storage/innobase/include/os0file.ic:261
#5  0x0000000001d3671a in fil_io (type=..., sync=true, page_id=..., page_size=..., byte_offset=0, len=1048576, buf=0x7f59e03a0000, message=0x0) at /home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc:5781
#6  0x0000000001cb25b0 in buf_dblwr_flush_buffered_writes () at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0dblwr.cc:1029
#7  0x0000000001cbce29 in buf_flush_end (buf_pool=0x4e3da98, flush_type=BUF_FLUSH_LRU) at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0flu.cc:1951
#8  0x0000000001cbcfd8 in buf_flush_do_batch (buf_pool=0x4e3da98, type=BUF_FLUSH_LRU, min_n=1024, lsn_limit=0, n_processed=0x7f59cd1a4c48) at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0flu.cc:2020
#9  0x0000000001cbd909 in buf_flush_LRU_list (buf_pool=0x4e3da98) at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0flu.cc:2293
#10 0x0000000001cbfe3e in pc_flush_slot () at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0flu.cc:2855
#11 0x0000000001cc0ee8 in buf_flush_page_cleaner_coordinator (arg=0x0) at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0flu.cc:3298
#12 0x00007f59ea9cf6ba in start_thread (arg=0x7f59cd1a5700) at pthread_create.c:333
#13 0x00007f59e9e6441d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pwrite
# SyncFileIO::execute
# os_file_io
#0  os_file_pwrite (type=..., file=8, buf=0x7fd5a69af200 &quot;\200\037\312\312\002&quot;, n=2048, offset=9838592, err=0x7fd5b41c74fc) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5536
#1  0x0000000001ab4ab2 in os_file_write_page (type=..., name=0x42f32f8 &quot;./ib_logfile1&quot;, file=8, buf=0x7fd5a69af200 &quot;\200\037\312\312\002&quot;, offset=9838592, n=2048) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5573
#2  0x0000000001ab5ff6 in os_file_write_func (type=..., name=0x42f32f8 &quot;./ib_logfile1&quot;, file=8, buf=0x7fd5a69af200, offset=9838592, n=2048) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:6115
#3  0x0000000001ab8273 in os_aio_func (type=..., mode=24, name=0x42f32f8 &quot;./ib_logfile1&quot;, file=..., buf=0x7fd5a69af200, offset=9838592, n=2048, read_only=false, m1=0x42f3218, m2=0x42f33c8) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:7471
#4  0x0000000001d24f23 in pfs_os_aio_func (type=..., mode=24, name=0x42f32f8 &quot;./ib_logfile1&quot;, file=..., buf=0x7fd5a69af200, offset=9838592, n=2048, read_only=false, m1=0x42f3218, m2=0x42f33c8, src_file=0x243ba20 &quot;/home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc&quot;, src_line=5781) at /home/rocky/mysql-5.7.22/storage/innobase/include/os0file.ic:261
#5  0x0000000001d36702 in fil_io (type=..., sync=true, page_id=..., page_size=..., byte_offset=8192, len=2048, buf=0x7fd5a69af200, message=0x42f33c8) at /home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc:5781
#6  0x0000000001a8d4f6 in log_group_write_buf (group=0x42f33c8, buf=0x7fd5a69af200 &quot;\200\037\312\312\002&quot;, len=2048, pad_len=0, start_lsn=1066766848, new_data_offset=438) at /home/rocky/mysql-5.7.22/storage/innobase/log/log0log.cc:1124
#7  0x0000000001a8e0f2 in log_write_up_to (lsn=1066768494, flush_to_disk=true) at /home/rocky/mysql-5.7.22/storage/innobase/log/log0log.cc:1389
#8  0x0000000001c25309 in trx_flush_log_if_needed_low (lsn=1066768494) at /home/rocky/mysql-5.7.22/storage/innobase/trx/trx0trx.cc:1794
#9  0x0000000001c25352 in trx_flush_log_if_needed (lsn=1066768494, trx=0x7fd5b4cd08d0) at /home/rocky/mysql-5.7.22/storage/innobase/trx/trx0trx.cc:1816
#10 0x0000000001c26e03 in trx_commit_complete_for_mysql (trx=0x7fd5b4cd08d0) at /home/rocky/mysql-5.7.22/storage/innobase/trx/trx0trx.cc:2451
#11 0x00000000019e0d70 in innobase_commit (hton=0x38307a0, thd=0x7fd534000950, commit_trx=true) at /home/rocky/mysql-5.7.22/storage/innobase/handler/ha_innodb.cc:4416
#12 0x0000000000fbf04b in ha_commit_low (thd=0x7fd534000950, all=true, run_after_commit=true) at /home/rocky/mysql-5.7.22/sql/handler.cc:1900
#13 0x0000000001745cbe in TC_LOG_DUMMY::commit (this=0x2ed3e08 &amp;lt;tc_log_dummy&amp;gt;, thd=0x7fd534000950, all=true) at /home/rocky/mysql-5.7.22/sql/tc_log.cc:28
#14 0x0000000000fbece4 in ha_commit_trans (thd=0x7fd534000950, all=true, ignore_global_read_lock=false) at /home/rocky/mysql-5.7.22/sql/handler.cc:1796
#15 0x0000000001748310 in trans_commit (thd=0x7fd534000950) at /home/rocky/mysql-5.7.22/sql/transaction.cc:239
#16 0x00000000016405f3 in mysql_execute_command (thd=0x7fd534000950, first_level=true) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:4418
#17 0x0000000001643ef0 in mysql_parse (thd=0x7fd534000950, parser_state=0x7fd5b41c9550) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:5737
#18 0x0000000001638c3d in dispatch_command (thd=0x7fd534000950, com_data=0x7fd5b41c9e00, command=COM_QUERY) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:1609
#19 0x0000000001637acc in do_command (thd=0x7fd534000950) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:1150
#20 0x000000000177b583 in handle_connection (arg=0x44153f0) at /home/rocky/mysql-5.7.22/sql/conn_handler/connection_handler_per_thread.cc:300
#21 0x0000000001dfe380 in pfs_spawn_thread (arg=0x4386580) at /home/rocky/mysql-5.7.22/storage/perfschema/pfs.cc:2190
#22 0x00007fd5be83f6ba in start_thread (arg=0x7fd5b41ca700) at pthread_create.c:333
#23 0x00007fd5bdcd441d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pwrite
# SyncFileIO::execute
# os_file_io
#0  os_file_pwrite (type=..., file=8, buf=0x7fd5a69af200 &quot;\200\037\312\312\002&quot;, n=2048, offset=9838592, err=0x7fd5b41c74fc) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5536
#1  0x0000000001ab4ab2 in os_file_write_page (type=..., name=0x42f32f8 &quot;./ib_logfile1&quot;, file=8, buf=0x7fd5a69af200 &quot;\200\037\312\312\002&quot;, offset=9838592, n=2048) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5573
#2  0x0000000001ab5ff6 in os_file_write_func (type=..., name=0x42f32f8 &quot;./ib_logfile1&quot;, file=8, buf=0x7fd5a69af200, offset=9838592, n=2048) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:6115
#3  0x0000000001ab8273 in os_aio_func (type=..., mode=24, name=0x42f32f8 &quot;./ib_logfile1&quot;, file=..., buf=0x7fd5a69af200, offset=9838592, n=2048, read_only=false, m1=0x42f3218, m2=0x42f33c8) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:7471
#4  0x0000000001d24f23 in pfs_os_aio_func (type=..., mode=24, name=0x42f32f8 &quot;./ib_logfile1&quot;, file=..., buf=0x7fd5a69af200, offset=9838592, n=2048, read_only=false, m1=0x42f3218, m2=0x42f33c8, src_file=0x243ba20 &quot;/home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc&quot;, src_line=5781) at /home/rocky/mysql-5.7.22/storage/innobase/include/os0file.ic:261
#5  0x0000000001d36702 in fil_io (type=..., sync=true, page_id=..., page_size=..., byte_offset=8192, len=2048, buf=0x7fd5a69af200, message=0x42f33c8) at /home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc:5781
#6  0x0000000001a8d4f6 in log_group_write_buf (group=0x42f33c8, buf=0x7fd5a69af200 &quot;\200\037\312\312\002&quot;, len=2048, pad_len=0, start_lsn=1066766848, new_data_offset=438) at /home/rocky/mysql-5.7.22/storage/innobase/log/log0log.cc:1124
#7  0x0000000001a8e0f2 in log_write_up_to (lsn=1066768494, flush_to_disk=true) at /home/rocky/mysql-5.7.22/storage/innobase/log/log0log.cc:1389
#8  0x0000000001c25309 in trx_flush_log_if_needed_low (lsn=1066768494) at /home/rocky/mysql-5.7.22/storage/innobase/trx/trx0trx.cc:1794
#9  0x0000000001c25352 in trx_flush_log_if_needed (lsn=1066768494, trx=0x7fd5b4cd08d0) at /home/rocky/mysql-5.7.22/storage/innobase/trx/trx0trx.cc:1816
#10 0x0000000001c26e03 in trx_commit_complete_for_mysql (trx=0x7fd5b4cd08d0) at /home/rocky/mysql-5.7.22/storage/innobase/trx/trx0trx.cc:2451
#11 0x00000000019e0d70 in innobase_commit (hton=0x38307a0, thd=0x7fd534000950, commit_trx=true) at /home/rocky/mysql-5.7.22/storage/innobase/handler/ha_innodb.cc:4416
#12 0x0000000000fbf04b in ha_commit_low (thd=0x7fd534000950, all=true, run_after_commit=true) at /home/rocky/mysql-5.7.22/sql/handler.cc:1900
#13 0x0000000001745cbe in TC_LOG_DUMMY::commit (this=0x2ed3e08 &amp;lt;tc_log_dummy&amp;gt;, thd=0x7fd534000950, all=true) at /home/rocky/mysql-5.7.22/sql/tc_log.cc:28
#14 0x0000000000fbece4 in ha_commit_trans (thd=0x7fd534000950, all=true, ignore_global_read_lock=false) at /home/rocky/mysql-5.7.22/sql/handler.cc:1796
#15 0x0000000001748310 in trans_commit (thd=0x7fd534000950) at /home/rocky/mysql-5.7.22/sql/transaction.cc:239
#16 0x00000000016405f3 in mysql_execute_command (thd=0x7fd534000950, first_level=true) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:4418
#17 0x0000000001643ef0 in mysql_parse (thd=0x7fd534000950, parser_state=0x7fd5b41c9550) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:5737
#18 0x0000000001638c3d in dispatch_command (thd=0x7fd534000950, com_data=0x7fd5b41c9e00, command=COM_QUERY) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:1609
#19 0x0000000001637acc in do_command (thd=0x7fd534000950) at /home/rocky/mysql-5.7.22/sql/sql_parse.cc:1150
#20 0x000000000177b583 in handle_connection (arg=0x44153f0) at /home/rocky/mysql-5.7.22/sql/conn_handler/connection_handler_per_thread.cc:300
#21 0x0000000001dfe380 in pfs_spawn_thread (arg=0x4386580) at /home/rocky/mysql-5.7.22/storage/perfschema/pfs.cc:2190
#22 0x00007fd5be83f6ba in start_thread (arg=0x7fd5b41ca700) at pthread_create.c:333
#23 0x00007fd5bdcd441d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# pwrite
# SyncFileIO::execute
# os_file_io
#0  os_file_pwrite (type=..., file=9, buf=0x7fd5b4210000 &quot;\231xח&quot;, n=49152, offset=1048576, err=0x7fd5a11a422c) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5536
#1  0x0000000001ab4ab2 in os_file_write_page (type=..., name=0x42f2ac8 &quot;./ibdata1&quot;, file=9, buf=0x7fd5b4210000 &quot;\231xח&quot;, offset=1048576, n=49152) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:5573
#2  0x0000000001ab5ff6 in os_file_write_func (type=..., name=0x42f2ac8 &quot;./ibdata1&quot;, file=9, buf=0x7fd5b4210000, offset=1048576, n=49152) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:6115
#3  0x0000000001ab8273 in os_aio_func (type=..., mode=24, name=0x42f2ac8 &quot;./ibdata1&quot;, file=..., buf=0x7fd5b4210000, offset=1048576, n=49152, read_only=false, m1=0x42f29e8, m2=0x0) at /home/rocky/mysql-5.7.22/storage/innobase/os/os0file.cc:7471
#4  0x0000000001d24f23 in pfs_os_aio_func (type=..., mode=24, name=0x42f2ac8 &quot;./ibdata1&quot;, file=..., buf=0x7fd5b4210000, offset=1048576, n=49152, read_only=false, m1=0x42f29e8, m2=0x0, src_file=0x243ba20 &quot;/home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc&quot;, src_line=5781) at /home/rocky/mysql-5.7.22/storage/innobase/include/os0file.ic:261
#5  0x0000000001d36702 in fil_io (type=..., sync=true, page_id=..., page_size=..., byte_offset=0, len=49152, buf=0x7fd5b4210000, message=0x0) at /home/rocky/mysql-5.7.22/storage/innobase/fil/fil0fil.cc:5781
#6  0x0000000001cb2598 in buf_dblwr_flush_buffered_writes () at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0dblwr.cc:1029
#7  0x0000000001cbce11 in buf_flush_end (buf_pool=0x3c74a98, flush_type=BUF_FLUSH_LIST) at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0flu.cc:1951
#8  0x0000000001cbcfc0 in buf_flush_do_batch (buf_pool=0x3c74a98, type=BUF_FLUSH_LIST, min_n=2, lsn_limit=18446744073709551615, n_processed=0x42f2480) at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0flu.cc:2020
#9  0x0000000001cbfeb2 in pc_flush_slot () at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0flu.cc:2870
#10 0x0000000001cc0ed0 in buf_flush_page_cleaner_coordinator (arg=0x0) at /home/rocky/mysql-5.7.22/storage/innobase/buf/buf0flu.cc:3298
#11 0x00007fd5be83f6ba in start_thread (arg=0x7fd5a11a5700) at pthread_create.c:333
#12 0x00007fd5bdcd441d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or . . .&lt;/p&gt;</content><author><name>Rocky Lim</name><email>rockylim@snu.ac.kr</email><uri>https://rockylim92.github.io/</uri></author><summary type="html">InooDB basic concept and function call trace(function call stack, read write path)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/innodb_01.jpg" /></entry><entry><title type="html">MySQL 소스코드 분석</title><link href="http://localhost:4000/research/mysql_02/" rel="alternate" type="text/html" title="MySQL 소스코드 분석" /><published>2018-03-01T19:00:00+09:00</published><updated>2018-03-01T19:00:00+09:00</updated><id>http://localhost:4000/research/mysql_02</id><content type="html" xml:base="http://localhost:4000/research/mysql_02/">&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#7가지-major-directories&quot; id=&quot;markdown-toc-7가지-major-directories&quot;&gt;7가지 Major Directories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#path&quot; id=&quot;markdown-toc-path&quot;&gt;Path&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h1 id=&quot;7가지-major-directories&quot;&gt;7가지 Major Directories&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;BUILD&lt;/li&gt;
  &lt;li&gt;client&lt;/li&gt;
  &lt;li&gt;Docs&lt;/li&gt;
  &lt;li&gt;myisam&lt;/li&gt;
  &lt;li&gt;mysys - toolbox directory. e.g. sort, changing charactoer set…&lt;/li&gt;
  &lt;li&gt;sql - parser, handler, statement… functions.&lt;/li&gt;
  &lt;li&gt;vio - virtual I/O, vio routines are wrappers for the various network I/O calls that happen with different protocols.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;path&quot;&gt;Path&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;/sql/mysqld.cc&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_cust_check_startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thr_setconcurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;init_ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;server_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;                             &lt;span class=&quot;c1&quot;&gt;// 'bind' + 'listen'
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;init_server_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;start_signal_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;acl_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opt_noacl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;init_slave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_shutdown_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_maintenance_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;handle_connections_sockets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// next path
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;DBUG_PRINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;quit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Exiting main thread&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;main 함수 부분. mysql 시작&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_connections_sockets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__attribute__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INVALID_SOCKET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;FD_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clientFDs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;DBUG_PRINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;general&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Waiting for connections.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abort_loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;new_sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_reinterpret_cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sockaddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unix_sock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;create_new_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// next path
&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;main thread가 새로 들어오는 클라이언트의 리퀘스트를 항상 듣고있다. 새로운 리퀘스트를 받으면, 다른 클라이언트와 독립적으로 구분되는 자원을 할당 해 준다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_new_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread_mutex_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOCK_thread_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection_attrib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;handle_one_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                        &lt;span class=&quot;c1&quot;&gt;// next path
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread_mutex_unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOCK_thread_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;새로운 스레드 생성됨.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/sql/sql_parse.cc&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_one_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;init_sql_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mem_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MEM_ROOT_BLOCK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MEM_ROOT_PREALLOC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vio&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;killed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// next path
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;close_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;end_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;net_new_transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;packet_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;my_net_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// gets a packet from the client
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enum_server_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dispatch_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// next path
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;패킷을 클라이언트로 받아온다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enum_server_command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COM_INIT_DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COM_REGISTER_SLAVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COM_TABLE_DUMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COM_CHANGE_USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COM_EXECUTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;mysql_stmt_execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// next path
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COM_LONG_DATA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COM_PREPARE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;mysql_stmt_prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packet_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// **
&lt;/span&gt;    &lt;span class=&quot;cm&quot;&gt;/* and so on for 18 other cases */&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;send_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ER_UNKNOWN_COM_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;** Prepare:&lt;/p&gt;

&lt;p&gt;Allocate a new statement, keep it in ‘thd-&amp;gt;prepared statements’ pool
Return to client the total number of parameters and result-set
metadata information (if any)”&lt;/p&gt;

&lt;p&gt;위 코드는 굉장히 긴 switch 문장의 일부분임. 여러 갈림길 중. mysql_stmt_execute path를 살펴본다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysql_stmt_execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_prepared_statement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stmt_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;execute&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;send_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;DBUG_VOID_RETURN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;init_stmt_execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mysql_execute_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// next path
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;excutes statate 관련.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysql_execute_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLCOM_SELECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLCOM_SHOW_ERRORS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLCOM_CREATE_TABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLCOM_UPDATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLCOM_INSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;// next path
&lt;/span&gt;       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLCOM_DELETE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLCOM_DROP_TABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;insert를 예로 들어보자.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLCOM_INSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;my_bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UPDATE_ACL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ulong&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;privilege&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplicates&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DUP_REPLACE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;INSERT_ACL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DELETE_ACL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INSERT_ACL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check_access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;privilege&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;privilege&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grant_option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;privilege&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_lex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;send_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ER_WRONG_VALUE_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DBUG_VOID_RETURN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysql_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;many_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;n&quot;&gt;select_lex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DUP_UPDATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duplicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// next path
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;report_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;insert시 해당 테이블에 적절한 권한이 있는지 등을 체크한다. 이것은 side path이고 mysql_insert를 따라 내려가 보면,&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysql_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;THD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TABLE_LIST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List_item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enum_duplicates&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duplic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open_ltable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check_insert_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;setup_tables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;setup_fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;goto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fill_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// next path
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;query_cache_invalidate3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transactional_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ha_autocommit_or_rollback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;query_cache_invalidate3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mysql_unlock_tables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;테이블 오픈, insert fail 체크 등의 에러 체크, 레코드 버퍼 체우기, 레코드에 값 쓰기, 쿼리캐시 invalidate 시키기 등을 수행한다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;COPY_INFO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// next path
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;write_row함수는 handler에 따라 여러 곳에 정의되어 있음.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ha_myisam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;statistic_increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ha_write_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOCK_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;cm&quot;&gt;/* If we have a timestamp column, update it to the current time */&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_stamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update_timestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_stamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;cm&quot;&gt;/*
  If we have an auto_increment column and we are writing a changed row
    or a new row, then update the auto_increment value in the record.
  */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_number_field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update_auto_increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mi_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// next path
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mi_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MI_INFO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_mi_readinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;F_WRLCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;_mi_mark_file_changed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* Calculate and check all unique constraints */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniques&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mi_check_unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniqueinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mi_unique_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniqueinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;HA_OFFSET_ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continued&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;아직 여기까지는 테이블이나 파일, 인덱스 키값에 대한 언급이 없다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continued&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;previous&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snippet&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Write all keys to indextree */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ck_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_mi_make_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auto_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;update_auto_increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;mi_write 함수의 후반부에 다른 명확한 주석이 표시되어 이것이 인덱싱 된 열에 대해 새로운 키가 만들어지는 곳이라는 것을 알 수 있습니다.&lt;/p&gt;

&lt;p&gt;지금까지 Mysql Server Code의 Stack trace는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysqld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;handle_connections_sockets&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysqld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;create_new_thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysqld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;handle_one_connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql_parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;do_command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql_parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dispatch_command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql_parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql_stmt_execute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql_prepare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql_execute_command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql_parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mysql_insert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysql_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write_record&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysql_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ha_myisam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ha_myisam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mi_write&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myisam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mi_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;mysql 5.7 version&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysqld_main        32  sql/main.cc
  onnection_event_loop  5125  sql/mysqld.cc
    process_new_connection    68  sql/conn_handler/connection_acceptor.h
      add_connection    268  sql/conn_handler/connection_handler_manager.cc

---another thread---

handle_connection		236	sql/conn_handler/connection_handler_per_thread.cc
  do_command        306  sql/conn_handler/connection_handler_per_thread.cc
    dispatch_command  1002  return_value= dispatch_command(thd, &amp;amp;com_data, command);
      mysql_parse      1509  mysql_parse(thd, &amp;amp;parser_state);
        mysql_execute_command  5658  error= mysql_execute_command(thd, true);
          execute          3640  sql/sql_parse.cc
            mysql_insert     3107  res= mysql_insert(thd, all_tables);
              write_record      769  error= write_record(thd, insert_table, &amp;amp;info, &amp;amp;update);
               handler::ha_write_row     1539  sql/sql_insert.cc
                  ha_innobase::write_row        7995  sql/handler.cc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;dispatch_command에서 COM_QUERY가 계속 요청됨, mysql_execute_command에서 상세 쿼리 종류에 따라 path가 달라지게 됨.&lt;/p&gt;</content><author><name>Rocky Lim</name><email>rockylim@snu.ac.kr</email><uri>https://rockylim92.github.io/</uri></author><summary type="html">소스코드 구조 &amp; 쿼리 path 분석</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/mysql_02_01.jpg" /></entry><entry><title type="html">개발자와 DBA를 위한 real mysql(work in progress)</title><link href="http://localhost:4000/research/mysql_01/" rel="alternate" type="text/html" title="개발자와 DBA를 위한 real mysql(work in progress)" /><published>2018-02-20T19:00:00+09:00</published><updated>2018-02-20T19:00:00+09:00</updated><id>http://localhost:4000/research/mysql_01</id><content type="html" xml:base="http://localhost:4000/research/mysql_01/">&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#architecture&quot; id=&quot;markdown-toc-architecture&quot;&gt;Architecture&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#path-overview&quot; id=&quot;markdown-toc-path-overview&quot;&gt;Path Overview&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#threading&quot; id=&quot;markdown-toc-threading&quot;&gt;Threading&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#메모리-할당-및-사용-구조&quot; id=&quot;markdown-toc-메모리-할당-및-사용-구조&quot;&gt;메모리 할당 및 사용 구조&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#플러그인-스토리지-엔진-모델&quot; id=&quot;markdown-toc-플러그인-스토리지-엔진-모델&quot;&gt;플러그인 스토리지 엔진 모델&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#쿼리-실행-구조&quot; id=&quot;markdown-toc-쿼리-실행-구조&quot;&gt;쿼리 실행 구조&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#replication&quot; id=&quot;markdown-toc-replication&quot;&gt;replication&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#쿼리-캐시&quot; id=&quot;markdown-toc-쿼리-캐시&quot;&gt;쿼리 캐시&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#innodb-스토리지-엔진-아키텍쳐&quot; id=&quot;markdown-toc-innodb-스토리지-엔진-아키텍쳐&quot;&gt;InnoDB 스토리지 엔진 아키텍쳐&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#innodb-버퍼-풀&quot; id=&quot;markdown-toc-innodb-버퍼-풀&quot;&gt;InnoDB 버퍼 풀&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#insert-buffer&quot; id=&quot;markdown-toc-insert-buffer&quot;&gt;Insert Buffer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#redo-로그-로그-버퍼&quot; id=&quot;markdown-toc-redo-로그-로그-버퍼&quot;&gt;Redo 로그, 로그 버퍼&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#실행-계획&quot; id=&quot;markdown-toc-실행-계획&quot;&gt;실행 계획&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#쿼리-실행-절차&quot; id=&quot;markdown-toc-쿼리-실행-절차&quot;&gt;쿼리 실행 절차&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;

&lt;h2 id=&quot;path-overview&quot;&gt;Path Overview&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Mysql 엔진
클라이언트로부터 접속 및 sql 쿼리 요청을 받아 문장을 분석, 최적화한다. 데이터를 스토리지로부터 읽거나 써야 할 떄는 스토리지 엔진에게 요청한다. 이러한 요청을 Handler Request라고 한다. 여기에 사용되는 API는 Handler API라고 함.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스토리지 엔진
실제 데이터를 디바이스에 저장하거나 읽어오는 부분을 담당. MySQL서버에서 Mysql엔진은 하나이지만 스토리지 엔진은 여러 개 일 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;threading&quot;&gt;Threading&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;포그라운드 스레드(클라이언트 스레드)&lt;/strong&gt; - mysql 서버에 접속한 클라이언트 만큼 존재하며, 클라이언트가 요청하는 쿼리 문장을 처리한다. MySQL에서 사용자 스레드와 포그라운드 스레드는 같은의미로 사용됨. 클라이언트가 서버에 접속하게 되면 그 서버는 클라이언트의 요청을 처리해 줄 스레드를 클라이언트에게 할당 해 준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;백그라운더 스레드&lt;/strong&gt; - InnoDB의 경우 여러가지 작업이 백그라운드로 처리된다. 예를 들어, insert Buffer를 병합, 로그를 디스크로 기록, InnoDB의 버퍼 풀의 데이터를 디스크에 기록, 데이터를 버퍼로 읽기, 모니터링 등이 있다. 읽기의 경우 클라이언트 스레드에서 처리되기 때문에, 읽기 스레드가 많을 필요가 없지만, 쓰기 스레드는 많은 작업들을 백그라운드로 처리하기 때문에, 충분하게 설정 해 주는 것이 좋다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;sql 처리에서 읽기는 지연이 없지만, 쓰기는 배치 프로세싱을 할 수 있음. InnoDB에서는 INSERT와 UPDATE 그리고 DELETE 쿼리로 데이터가 변경되는 경우, 데이터가 디스크의 데이터 파일로 완정히 저장될 때 까지 기다리지 않아도 된다. 하지만, MyISAM에서 일반적인 쿼리는 쓰기 버퍼링 기능을 사용할 수 없다.&lt;/p&gt;

&lt;h2 id=&quot;메모리-할당-및-사용-구조&quot;&gt;메모리 할당 및 사용 구조&lt;/h2&gt;

&lt;p&gt;MySQL에서 사용되는 메모리 공간은 크게 글로벌 메모리 영역과 로컬 메모리 영역으로 구분된다. 글로벌 메모리 영역의 모든 메모리 공간은 MySQL서버가 시작되면서 OS로부터 할당된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;글로벌 메모리 영역&lt;/strong&gt; - 클라이언트 스레드의 수와 무관하게 하나의(일반적으로) 메모리 공간으로 할당 된다. 모든 스레드에 의해 공유된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;로컬 메모리 영역&lt;/strong&gt; - 세션 메모리 영역이라고도 표현하며, MySQL 서버상에 존재하는 클라이언트 스레드가 쿼리를 처리하는데 사용하는 메모리 영역,  클라이언트 메모리 영역, 또는 세션 메모리 영역이라고도 한다.
로컬 메모리 영역은 각 클라이언트 스레드 별로 독립적으로 할당되며, 절대 공유되어 사용되지 않는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;플러그인-스토리지-엔진-모델&quot;&gt;플러그인 스토리지 엔진 모델&lt;/h2&gt;

&lt;p&gt;대부분의 MySQL기능은 MySQL엔진에서 처리된다. I/O 작업만 스토리지 엔진에서 처리됨, 따라서 플러그인 처럼 서로다른 스토리지 엔진을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;MySQL 엔진이 스토리지 엔진을 조정하기 위해 핸들러라는 것을 사용하게 된다. MySQL엔진이 각 스토리지 엔진에게 데이터를 읽어오거나 저장하도록 명령하려면 핸들러를 반드시 통해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;쿼리-실행-구조&quot;&gt;쿼리 실행 구조&lt;/h2&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
		&lt;img src=&quot;http://localhost:4000/images/mysql_01_01.jpg&quot; alt=&quot;Drawing&quot; style=&quot;width: 600;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rrhh234cm.tistory.com/140&quot;&gt;http://rrhh234cm.tistory.com/140&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;파서&lt;/strong&gt; - 문법 체크, 토큰분리&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;전처리기&lt;/strong&gt; - 객체의 존재 유무, 접근 권한 확인 등.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;옵티마이저&lt;/strong&gt; - 두뇌, 가장 중요&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;실행 엔진&lt;/strong&gt; - 손과 발,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;핸들러(스토리지 엔진)&lt;/strong&gt; - I/O&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;replication&quot;&gt;replication&lt;/h2&gt;

&lt;p&gt;데이터베이스의 데이터가 대용량화 됨에 따라, 확장성을 위한 여러 기술 중 하나. 두 개 이상의 MySQL서버가 동일한 데이터를 담도록 실시간으로 동기화 하는 기술.&lt;/p&gt;

&lt;h2 id=&quot;쿼리-캐시&quot;&gt;쿼리 캐시&lt;/h2&gt;

&lt;p&gt;쿼리의 결과를 쿼리 캐시에 담아 두고, 동일한 쿼리 요청이 왔을때 캐시에서 그 결과를 돌려준다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;절차
    &lt;ol&gt;
      &lt;li&gt;요청된 쿼리 문장이 쿼리 캐시에 존재하는가(공백이나 개행문자 하나라도 같아야 한다)?&lt;/li&gt;
      &lt;li&gt;해당 사용자가 그 결과를 볼 수 있는 권한을 가지고 있는가?&lt;/li&gt;
      &lt;li&gt;트랜잭션 내에서 실행된 쿼리 인 경우, 그 결과가 가시 범위 내의 트랜잭션 내에서 만들어진 결과 인가(InnoDB의 경우)&lt;/li&gt;
      &lt;li&gt;쿼리에 사용된 기능(내장 함수나 저장 함수, 예를 들어 랜덤이나 현재 날짜 관련 )이 캐시 되어도 동일한 결과를 보장 할 수 있는가?&lt;/li&gt;
      &lt;li&gt;캐시가 만들어지고 난 이후ㅠ 해당 데이터가 다른 사용자에 의해 변경되지 않았는가?&lt;/li&gt;
      &lt;li&gt;쿼리에 의해 만들어진 결과가 캐시하기에 너무 크지 않은가?&lt;/li&gt;
      &lt;li&gt;그 밖에 쿼리 캐시를 사용하지 못하게 만드는 요소가 사용됐는가?
등등등&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;innodb-스토리지-엔진-아키텍쳐&quot;&gt;InnoDB 스토리지 엔진 아키텍쳐&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;InnoDB 특징
    &lt;ol&gt;
      &lt;li&gt;프라이머리 키에 의한 클러스터링&lt;/li&gt;
      &lt;li&gt;잠금이 필요없는 읽기&lt;/li&gt;
      &lt;li&gt;foreign key 지원&lt;/li&gt;
      &lt;li&gt;자동 데드락 감지&lt;/li&gt;
      &lt;li&gt;자동화 된 장애 복구&lt;/li&gt;
      &lt;li&gt;오라클 아키텍쳐 적용&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;innodb-버퍼-풀&quot;&gt;InnoDB 버퍼 풀&lt;/h2&gt;

&lt;p&gt;MySQL의 쓰기 작업(INSERT, DELETE등)은 파일의 이곳 저곳에 위치한 레코드를 변경하기 때문에 랜덤한 디스크 작업을 발생시킴. 버퍼풀이 이러한 변경된 데이터를 모아서 처리하게 되면 랜덤한 디스크 잡업의 횟수를 줄일 수 있다.&lt;/p&gt;

&lt;p&gt;InnoDB의 버퍼 풀은 데이터와 인덱스 모두 캐시하고 쓰기 버퍼링의 역할까지 모두 처리한다. 또한, 여러 백그라운드 작업의 기반이 되는 메모리 공간이다. 따라서 InnoDB의 버퍼 풀 크기를 충분하게 설정해야 한다.&lt;/p&gt;

&lt;p&gt;InnoDB 버퍼 풀은 아직 디스크에 기록되지 않은 변경된 데이터를 가지고 있다. &lt;strong&gt;이런 데이터를 가지고 있는 페이지를 더티 페이지라고 하는데&lt;/strong&gt;, InnoDB에서는 이런 더티 페이지를 주기적으로 체크포인트 이벤트를 통해 Write Thread 가 필요한 만큼의 더티페이지를 디스크에 기록한다. 체크포인트가 발생한다고 해서 모든 더티페이지를 디스크에 기록하는 것은 아니다.&lt;/p&gt;

&lt;h2 id=&quot;insert-buffer&quot;&gt;Insert Buffer&lt;/h2&gt;

&lt;p&gt;INSERT나 UPDATE시 데이터 파일을 변경하는 작업 뿐 아니라 해당 테이블에 포함된 인덱스를 업데이트 해야하는 작업이 필요함. 이 작업은 랜덤한 디스크 읽기 이므로 오버헤드가 있음. 따라서, InnoDB에서는 변경해야 할 인덱스 페이지가 버퍼 풀에 있으면 바로 업데이트를 수행하고, 디스크로부터 읽어와서 업데이트를 해야 한다면 임시 공간에 저장 해 두고 결과를 사용자에게 반환한다. 이때 이 임시 공간을 Insert Buffer라고 한다&lt;/p&gt;

&lt;h2 id=&quot;redo-로그-로그-버퍼&quot;&gt;Redo 로그, 로그 버퍼&lt;/h2&gt;

&lt;p&gt;MySQL에서 변경된 데이터를 버퍼링 해 두기 위해 InnoDB 버퍼 풀 과 같은 장치가 마련되어 있음, 이것만으로 ACID를 보장하기 어려움. 변경된 내용을 순차적으로 디스크에 기록하는 로그 파일을 가지고 있음. 이 로그를 Redo log라고 함.&lt;/p&gt;

&lt;p&gt;데이터의 변경 작업이 매우 많은 DBMS서버의 경우에는 이 리두 로그의 기록 작업이 문제가 됨. 따라서 ACID를 보장하는 수준에서 버핑을 하고 이 버퍼링에 사용되는 공간이 로그버퍼임.&lt;/p&gt;

&lt;h1 id=&quot;실행-계획&quot;&gt;실행 계획&lt;/h1&gt;

&lt;h2 id=&quot;쿼리-실행-절차&quot;&gt;쿼리 실행 절차&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;사용자로부터 요청된 SQL 문장을 잘개 쪼개서 MySQL 서버가 이해할 수 있는 수준으로 분리한다.&lt;/li&gt;
  &lt;li&gt;SQL Parse tree를 만들어, 어떤 테이블로부터 읽고, 어떤 인덱스를 사용하여 테이블을 읽을지 정한다.&lt;/li&gt;
  &lt;li&gt;2.로부터 결정된 방법을 통해 스토리지 엔진으로부터 데이터를 가져온다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1~2 단계는 MySQL 엔진에서 처리하며, 3단계는 MySQL엔진과 스토리지엔진 모두가 관여한다.&lt;/p&gt;</content><author><name>Rocky Lim</name><email>rockylim@snu.ac.kr</email><uri>https://rockylim92.github.io/</uri></author><summary type="html">mysql architecture</summary></entry><entry><title type="html">liblightnvm(work in progress)</title><link href="http://localhost:4000/research/openChannelSSD_liblightnvm/" rel="alternate" type="text/html" title="liblightnvm(work in progress)" /><published>2018-02-20T19:00:00+09:00</published><updated>2018-02-20T19:00:00+09:00</updated><id>http://localhost:4000/research/openChannelSSD_liblightnvm</id><content type="html" xml:base="http://localhost:4000/research/openChannelSSD_liblightnvm/">&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#obtaining-device-information&quot; id=&quot;markdown-toc-obtaining-device-information&quot;&gt;Obtaining device information&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#physical-addressing&quot; id=&quot;markdown-toc-physical-addressing&quot;&gt;Physical Addressing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#vectorized-io&quot; id=&quot;markdown-toc-vectorized-io&quot;&gt;vectorized IO&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#write-constraint&quot; id=&quot;markdown-toc-write-constraint&quot;&gt;write constraint&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#read-constraint&quot; id=&quot;markdown-toc-read-constraint&quot;&gt;read constraint&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#virtual-block&quot; id=&quot;markdown-toc-virtual-block&quot;&gt;virtual block&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#block-line&quot; id=&quot;markdown-toc-block-line&quot;&gt;Block Line&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h1 id=&quot;obtaining-device-information&quot;&gt;Obtaining device information&lt;/h1&gt;

&lt;p&gt;다음과 같은 명령어를 통해서 Open Channel SSD의 physical geometry를 알 수 있다. 즉, 디바이스의 정보를 얻을 수 있음.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nvm_dev info /dev/nvme0n1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Device information -- nvm_dev_pr&lt;/span&gt;
dev:
  verid: 0x02
  be_id: 0x02
  name: &lt;span class=&quot;s1&quot;&gt;'nvme0n1'&lt;/span&gt;
  path: &lt;span class=&quot;s1&quot;&gt;'/dev/nvme0n1'&lt;/span&gt;
  fd: 3
  ssw: 12
  pmode: &lt;span class=&quot;s1&quot;&gt;'DUAL'&lt;/span&gt;
  erase_naddrs_max: 64
  read_naddrs_max: 64
  write_naddrs_max: 64
  meta_mode: 0
  bbts_cached: 0
dev_geo:
  nchannels: 16
  nluns: 8
  nplanes: 2
  nblocks: 1020
  npages: 512
  nsectors: 4
  page_nbytes: 16384
  sector_nbytes: 4096
  meta_nbytes: 16
  tbytes: 2190433320960
  tmbytes: 2088960
dev_ppaf:
  ch_off: 25
  ch_len: 04
  lun_off: 22
  lun_len: 03
  pl_off: 02
  pl_len: 01
  blk_off: 12
  blk_len: 10
  pg_off: 03
  pg_len: 09
  sec_off: 00
  sec_len: 02
dev_ppaf_mask:
  ch:  &lt;span class=&quot;s1&quot;&gt;'0000000000000000000000000000000000011110000000000000000000000000'&lt;/span&gt;
  lun: &lt;span class=&quot;s1&quot;&gt;'0000000000000000000000000000000000000001110000000000000000000000'&lt;/span&gt;
  pl:  &lt;span class=&quot;s1&quot;&gt;'0000000000000000000000000000000000000000000000000000000000000100'&lt;/span&gt;
  blk: &lt;span class=&quot;s1&quot;&gt;'0000000000000000000000000000000000000000001111111111000000000000'&lt;/span&gt;
  pg:  &lt;span class=&quot;s1&quot;&gt;'0000000000000000000000000000000000000000000000000000111111111000'&lt;/span&gt;
  sec: &lt;span class=&quot;s1&quot;&gt;'0000000000000000000000000000000000000000000000000000000000000011'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;physical-addressing&quot;&gt;Physical Addressing&lt;/h1&gt;

&lt;p&gt;struct nvm_addr 라는 자료구조로 물리 페이지 주소가 표현된다.&lt;/p&gt;

&lt;p&gt;Construct an address for sector 3 within page 11 in block 200 on plane 0 of LUN 1 in channel 4:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nvm_addr from_geo /dev/nvme0n1 4 1 0 200 10 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yielding:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x04010003000a00c8: {ch: 04, lun: 01, pl: 0, blk: 0200, pg: 010, sec: 3}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;플래시 메모리에 I/O 할 수 있도록 해주는  유저스페이스 라이브러리, I/O 인텐시브한 어플리케이션이 어플리케이션에서 FTL을 구현할 수 있도록 도와줄 수 있다.&lt;/p&gt;

&lt;p&gt;liblightnvm is a user space library that manages provisioning of and I/O submission to physical flash. The motivation is to enable I/O-intensive applications to implement their own Flash Translation Layer (FTLs) using the internal application data structures. The design is based on the principle that high-performance I/O applications often use structures that assimilates structures found within a Flash translation layer. This include log-structured data structures that provides their own mechanisms for data placement, garbage collection, and I/O scheduling strategies.&lt;/p&gt;

&lt;p&gt;For example, popular key-value stores often use a form of Log Structured Merge Trees (LSMs) as their base data structure (including RocksDB, MongoDB, Apache Cassandra). The LSM is in itself a form of FTL, which manages data placement and garbage collection. This class of applications can benefit from a direct path to physical flash to take full advantage of the optimizations they do and spend host resources on, instead of missing them through the several levels of indirection that the traditional I/O stack imposes to enable genericity: page cache, VFS, file system, and device physical - logical translation table. liblightnvm exposes append-only primitives using direct physical flash to support this class of applications.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/OpenChannelSSD/liblightnvm&quot;&gt;https://github.com/OpenChannelSSD/liblightnvm&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;vectorized-io&quot;&gt;vectorized IO&lt;/h1&gt;

&lt;h2 id=&quot;write-constraint&quot;&gt;write constraint&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Erase before write&lt;/li&gt;
  &lt;li&gt;they must be at the granularity of a full flash page&lt;/li&gt;
  &lt;li&gt;they must be contiguous within a block&lt;/li&gt;
  &lt;li&gt;writes must be performed to the block accross all planes(minimum write)
  한 die에 plane이 두 개 있을때, 쓰기는 이 plane에 모두 이루어져야 한다. 따라서, 이 조건을 만족하도록 쓰기를 하거나 &lt;em&gt;plane-mode&lt;/em&gt;를 꺼 주는 옵션을 써야 한다.&lt;/li&gt;
  &lt;li&gt;we can construct a command with 64 addresses.(maximum write)
  한 nvme command에 64개의 ppa를 지정 해 줄 수 있다. 따라서, 4k X 64크기 만큼의 데이터 쓰기를 한 커멘드를 통해 요청할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;read-constraint&quot;&gt;read constraint&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;The granularity of a read is a single sector (the smallest addressable unit) and can be performed non-contiguously.&lt;/li&gt;
  &lt;li&gt;The primary constraint for a read to adhere to is that the block which is read from must be closed. That is, all pages within the block must have been written
  읽기 전에 해당 블록은 모든 페이지가 다 쓰여져 있는 상태 이어야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;virtual-block&quot;&gt;virtual block&lt;/h1&gt;
&lt;p&gt;liblightnvm, therefore, introduces a pure software abstraction, a virtual block, to reduce the cognitive load for application developers.&lt;/p&gt;

&lt;p&gt;A virtual block behaves as a physical, that is, the constraints of working with NAND media also apply to a virtual block. However, the abstraction encapsulates the command and address construction of parallel vectorized IO and exposes a flat address space which is read/written in a manner equivalent to the read/write primitives offered by libc.&lt;/p&gt;

&lt;h1 id=&quot;block-line&quot;&gt;Block Line&lt;/h1&gt;</content><author><name>Rocky Lim</name><email>rockylim@snu.ac.kr</email><uri>https://rockylim92.github.io/</uri></author><summary type="html">유저스페이스에서 Open Channel SSD 컨트롤 하기</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/liblightnvm_01_01.png" /></entry><entry><title type="html">Performance Analysis Based on Write Buffer and Thread Configuration in Open Channel SSD Platforms</title><link href="http://localhost:4000/research/openChannelSSD_ksc/" rel="alternate" type="text/html" title="Performance Analysis Based on Write Buffer and Thread Configuration in Open Channel SSD Platforms" /><published>2018-02-01T19:00:00+09:00</published><updated>2018-02-01T19:00:00+09:00</updated><id>http://localhost:4000/research/openChannelSSD_ksc</id><content type="html" xml:base="http://localhost:4000/research/openChannelSSD_ksc/">&lt;!--

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/openChannelSSD.png&quot; alt=&quot;Drawing&quot; style=&quot;width: 600;&quot;/&gt;
&lt;/p&gt;

--&gt;

&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#abstraction&quot; id=&quot;markdown-toc-abstraction&quot;&gt;Abstraction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#experimental-setup-and-evaluation&quot; id=&quot;markdown-toc-experimental-setup-and-evaluation&quot;&gt;Experimental setup and evaluation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reference&quot; id=&quot;markdown-toc-reference&quot;&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h1 id=&quot;abstraction&quot;&gt;Abstraction&lt;/h1&gt;
&lt;p&gt;Open Channel SSD는 스토리지 디바이스에 FTL(Flash Translation Layer)을 구현하지 않고, 운영체제에 게 SSD(Solid-State Drive)의 관리를 맡기는 SSD이다. 따라서 리눅스에서는 LightNVM과 같은 추상화 계 층을 제공한다. pblk(The Physical Block Device)은 LightNVM Layer에 위치하는 커널 모듈로서 기존의 SSD의 FTL에서 수행하는 기능들을 호스트에서 수행한다. 본 논문에서는 Open Channel SSD에서 쓰기 요청의 처리 과정을 보이고, pblk에 구현되어 있는 소프트웨어 버퍼인 쓰기 버퍼(Write Buffer) 및 입출력 요청의 스레드 구성에 따른 성능 분석 결과를 보인다.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;향후 수년 내에 Solid-State Drive(SSD)는 지배적인 보조기억장치가 될 것으로 예상된다. SSD는 기존의 전통적인 Hard Disk Drive(HDD)에 비해서 우수한 성능을 보이지만, 스토리지 디바이스에 최적화 부족으로 인한 자원의 비효율 적인 이용 문제[4], long taillatency, unpredictable I/O latency와 같은 단점들을 갖는다 [1, 2, 3]. 이러한 문제점들은 대부분 Hard Disk Drive에 최적화 된 Block I/O 인터페이스 때문이다 [5].&lt;/p&gt;

&lt;p&gt;Open Channel SSD는 위와 같은 문제점들을 해결할 수 있는 새로운 형태의 SSD 플랫폼이다. Open Channel SSD는 그 내부 Geometry를 호스트 운영체제에 드러내고, 호스트가 스토리지 디바이스 내부의 물리적인 데이터 배치나 I/O 스케줄링을 관리할 수 있게 한다. 이렇게 함으로서, 호스트와 SSD 컨트롤러는 SSD 디바이스 작동과 관련된 기능을 나누어 수행한다 [3]. 기존의 SSD의 FTL Layer에서 수행하던 address translation, garbage collection, error handling 과 같은 기능들이 호스트에서 수행될 수 있다. 따라서 시스템에 따라 스토리지 소프트웨어 스택을 Open Channel SSD를 사용하는 응용 프로그램에 알맞게 재 구성할 수 있다. 리눅스 커널 4.4 이후부터 호스트 기반의 SSD 관리 서브시스템인 LightNVM 계층이 사용되었고, 리눅스 커널 4.12 이후부터는 호스트에서 FLT(Flash Translation Layer)의 기능을 담당하는 pblk이 커널에 포함되었다. 이와 같은 시스템 상에서, Channel SSD는 하나의 물리적인 블록 디바이스로서 호스트에게 노출되어 보여지고, 사용자는 SSD를 특정 워크로드 패턴에 맞게 최적화 할 수 있다&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/2018-02-01-openChannelSSD_ksc01.png&quot; alt=&quot;Drawing&quot; style=&quot;width: 600;&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;experimental-setup-and-evaluation&quot;&gt;Experimental setup and evaluation&lt;/h1&gt;

&lt;p&gt;본 논문에서 보이는 실험의 목적은 두 가지 이다. 첫 번째로, LightNVM 스택의 pblk모듈에 구현된 쓰기 버퍼의 크기에 따른 입, 출력의 성능을 분석하는 것이다. 두 번째로, 병렬적인 입, 출력의 정도에 따른 성능 변화를 분석한다. 즉 여러 다중 코어, 다중 스레드 환경에서의 Open Channel SSD의 성능을 분석하는 것이다.&lt;/p&gt;

&lt;p&gt;본 실험을 위해 72코어의 Intel Xeon E7-8870 프로세서 서버를 사용하였으며, 16Gib DRAM, PIC 3.0 인터페이스 및 CNEX Labs Westlake SDK(2TB NAND MLC Flash) Open Channel SSD를 사용하였다. Open Channel SSD의 상세한 특징은 &amp;lt;표 1&amp;gt;에 나타내었다. 호스트는 Ubuntu 16.04.3 LTS server를 사용하였고, pblk 모듈을 사용한 리눅스 커널 4.14.0-rc2 버전을 사용하였다. 디바이스의 입출력 성능 실험을 위해 fio[6]를 사용하였다. 실험은 파일시스템을 거치지 않고 디바이스에 직접 입출력 요청을 하도록 설정하였고, 동일한 실험 환경에서 3번의 실험을 진행한 뒤 평균값을 결과로 사용하였다. 입출력 스레드 수와 동일한 코어의 수만 활성화 시켜 실험을 진행하였으며, 쓰기 버퍼의 크기는 버퍼를 구성하는 엔트리의 개수를 조정하는 방식으로 시스템을 구현하였다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/2018-02-01-openChannelSSD_ksc02.png&quot; alt=&quot;Drawing&quot; style=&quot;width: 600;&quot; /&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/2018-02-01-openChannelSSD_ksc03.png&quot; alt=&quot;Drawing&quot; style=&quot;width: 600;&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;실험 결과에 따르면 Open Channel SSD 읽기 요청 처리 성능은 스레드 수에 비례하여 점점 증가하다 어느 정도 병렬성의 정도가 증가하면 성능의 증가율이 감소하는 모습을 보인다. 특히, 읽기 요청 스레드가 54개에서 72개로 증가할 땐 성능의 변화가 거의 없었다.&lt;/p&gt;

&lt;p&gt;쓰기 버퍼의 크기에 따른 성능은 스레드 개수에 상관 없이 모두 일정한 증가 비율을 나타냈는데, 이는 쓰기 버퍼의 크기가 증가함에 따라, 읽기 요청 시 버퍼 캐시 히트 비율이 증가했기 때문이다.&lt;/p&gt;

&lt;p&gt;64MB이상의 버퍼 크기에서 진행한 쓰기 요청에 대한 성능 실험결과는 스레드가 2개에서 4개로 증가할 때, 약간의 증가율을 보이지만 나머지 구간에서는 큰 증가율을 보이지 않는다. 쓰기 버퍼의 크기가 32MB일 때에는 임의 쓰기 요청(random write request)시 스레드의 수에 따라 18개 스레드 수 까지는 비교적 큰 비율로 쓰기 성능이 증가한다.&lt;/p&gt;

&lt;p&gt;쓰기 버퍼의 크기가 32MB일 때, 일반 쓰기와 임의쓰기 모두 18쓰레드 이후 쓰기 성능이 18개의 스레드 일 때와 비교하여 큰 폭으로 감소함을 보인다. 이는 작은 크기의 버퍼에 비해 많은 쓰기 스레드가 쓰기 요청을 하여, 항상 버퍼가 가득 차있는 상황을 나타내고, 더 이상 성능의 증가가 나타나지 않음을 나타내는 것으로 예상된다.&lt;/p&gt;

&lt;p&gt;실험 결과를 통해 쓰기 버퍼의 크기 및 스레드 구성에 따른 입출력 요청의 성능 양상을 확인할 수 있었다. 특히 읽기 요청에 비해 쓰기 요청은 스레드 수 및 쓰기 버퍼가 증가해도 성능의 향상이 크지 않음을 확인하였다. 차후 진행될 연구에서는 이러한 쓰기 요청에서의 성능 증가를 막는 원인을 파악하고, 병렬성을 높이는 것을 포함한다.&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;

&lt;p&gt;[1] Hao, M., Soundararajan, G., Kencham mana Hosekote, D. R., Chien, A. A., &amp;amp; Gunawi, H. S. (2016, February). The Tail at Store: A Revelation from Millions of Hours of Disk and SSD Deployments. In FAST (pp. 263-276).&lt;/p&gt;

&lt;p&gt;[2] Chen, F., Luo, T., &amp;amp; Zhang, X. (2011, February). CAFTL: A Content-Aware Flash Translation Layer Enhancing the Lifespan of Flash Memory based Solid State Drives. In FAST (Vol. 11, pp. 77-90).&lt;/p&gt;

&lt;p&gt;[3] Bjørling, M., González, J., &amp;amp; Bonnet, P. (2017, February). LightNVM: The Linux OpenChannel SSD Subsystem. In FAST (pp. 359374).&lt;/p&gt;

&lt;p&gt;[4] Agrawal, N., Prabhakaran, V., Wobber, T., Davis, J. D., Manasse, M. S., &amp;amp; Panigrahy, R. (2008, June). Design Tradeoffs for SSD Performance. In USENIX Annual Technical Conference (Vol. 8, pp. 57-70).&lt;/p&gt;

&lt;p&gt;[5] Swanson, S., &amp;amp; Caulfield, A. M. (2013). Refactor, reduce, recycle: Restructuring the i/o stack for the future of storage. Computer, 46(8), 52-59.&lt;/p&gt;

&lt;p&gt;[6] AXBOE, J. Fio - Flexible I/O tester. URL http://freecode.com/projects/fio (2014).&lt;/p&gt;</content><author><name>Rocky Lim</name><email>rockylim@snu.ac.kr</email><uri>https://rockylim92.github.io/</uri></author><summary type="html">Open Channel SSD 플랫폼에서 쓰기 버퍼 및 스레드 구성에 따른 성능 분석</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/2018-02-01-openChannelSSD_ksc01.png" /></entry><entry><title type="html">How Computers Work [09]</title><link href="http://localhost:4000/book/hcw09/" rel="alternate" type="text/html" title="How Computers Work [09]" /><published>2017-11-10T21:00:00+09:00</published><updated>2017-11-10T21:00:00+09:00</updated><id>http://localhost:4000/book/hcw09</id><content type="html" xml:base="http://localhost:4000/book/hcw09/">&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw.jpg&quot; alt=&quot;Drawing&quot; style=&quot;width: 380px;&quot; /&gt;
&lt;/p&gt;

&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#how-email-outtraces-snail-mail&quot; id=&quot;markdown-toc-how-email-outtraces-snail-mail&quot;&gt;How Email outtraces snail mail&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-internet-file-sharing-wroks&quot; id=&quot;markdown-toc-how-internet-file-sharing-wroks&quot;&gt;How Internet File Sharing Wroks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-clouds-encompass-us-all&quot; id=&quot;markdown-toc-how-clouds-encompass-us-all&quot;&gt;HOW CLOUDS ENCOMPASS US ALL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h1 id=&quot;how-email-outtraces-snail-mail&quot;&gt;How Email outtraces snail mail&lt;/h1&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw09_1.jpg&quot; alt=&quot;Drawing&quot; style=&quot;width: 600px;&quot; /&gt;
&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Using an email client, Jane creates a message to go to Bob. She also attaches a photo of herself for the company website, which is encoded using a standard algorithm, such as MIME, uuencode, or BINHEX. Just as easily, Jane could enclose a word processing document, spreadsheet, or program.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The encoding turns the data making up the photograph into ASCII text, which computers commonly use for unformatted, simple text. The email software might also compress the enclosure before attaching it to the message so it takes less time to send.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The client software contacts the Internet service provider’s computer server over a modem or network connection. The client software connects to a piece of software called an &lt;strong&gt;SMTP&lt;/strong&gt; server, short for &lt;strong&gt;Simple Mail Transfer Protocol&lt;/strong&gt;. The server acknowledges that it has been contacted, and the client tells the server it has a message to be sent to a certain address. The SMTP replies with a message saying either, “Send it now,” or “Too busy; send later.”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;프로토콜(Protocol) - 응용프로그램 간(즉, 클라이언트와 데이터베이스 서버 간)의 데이터 전송 방식을 제어하는 규칙들의 집합을 네트워크 프로토콜이라고 한다. 네트워크 프로토콜은 네트워크를 통해 데이터를 전송할 때 사용하는 유형을 지정함. 네트워크 프로토콜의 예로는 TCP/IP, SMTP가 있다.&lt;/p&gt;

&lt;p&gt;프로토콜은 두 가지로 이루어져 있으며 물리적 측면과 논리적 측면으로 나뉜다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;물리적 측면: 자료 전송에 쓰이는 전송 매체, 접속용 단자 및 전송 신호, 회선 규격 등.&lt;/li&gt;
  &lt;li&gt;논리적 측면: 프레임(Frame, 자료의 표현 형식 단위) 구성, 프레임 안에 있는 각 항목의 뜻과 기능, 자료 전송의 절차 등.
      1. 폐쇄적인 프로토콜: 자사 장치들끼리 통신하기 위한 독자적인 통신 규약이며, 자세한 규격이 공개되어 있지 않아서 크래킹 위협에 상대적으로 안전하다. (보기: IBM의 SNA, SDLC 프로토콜)
      2. 공개된 범용 프로토콜: 여러 장치들에 쓰이는 널리 알려진 규격이며, 규격이 널리 공개되어 있기 때문에 컴퓨터와 네트워크 크래킹에 취약한 편이다. (보기: 인터넷의 TCP/IP)&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The client sends the message to the SMTP server and asks for confirmation. The server confirms that it has received the message.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The SMTP server asks another piece of software, a domain name server, how to route the message through the Internet. The &lt;strong&gt;domain name server&lt;/strong&gt; looks up the domain name—the part of the address after the @ character—to locate the recipient’s email server. The domain name server tells the SMTP the best path for the message.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;’@’ 문자 뒤에 주소의 일부인 도메인 이름을 조회하여받는 사람의 전자 메일 서버를 찾습니다. 도메인 이름 서버는 SMTP에 메시지의 가장 적합한 경로를 알려줌.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;After the &lt;strong&gt;SMTP&lt;/strong&gt; sends the message, the email travels through various Internet routers. Routers decide which electronic pathway to send the email along based on how busy the routes are. The message might also pass through one or more &lt;strong&gt;gateways&lt;/strong&gt;, which translate the data from one type of computer system—such as Windows, Unix, and Macintosh—to the type of computer system that’s the next pass-through point on the route.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;라우터는 경로가 얼마나 바쁜지에 따라 전자 메일을 보낼 전자 경로를 결정&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;When the email arrives at Bob’s SMTP server, the server transfers the message to another server, usually of the &lt;strong&gt;POP (Post Office Protocol) or IMAP (Internet Message Access Protocol)&lt;/strong&gt; variety. The email server holds the message until Bob asks for it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;POP, IMAP도 서버에서 돌아가고 있는 프로그램으로 생각해도 된다. 네이버 메일의 경우, 네이버 회사 데이터센터에서 운용되고 있는 서버에 구현되어 있을 것 같음(예상)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Using his email client, Bob logs on to the email server with a username and password and then asks the server to check for mail.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The email server retrieves Jane’s stored message and transmits it to Bob’s email client. Some email software decodes and decompresses any enclosures. Others make Bob use a utility program to expand and decode the attachment. Either way, Bob can now read Jane’s message and any attachments.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;how-internet-file-sharing-wroks&quot;&gt;How Internet File Sharing Wroks&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;네트워크 프로그래밍 위해서,&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw09_2.jpg&quot; alt=&quot;Drawing&quot; style=&quot;width: 600px;&quot; /&gt;
&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;A file-sharing program user logs on to one of several file-sharing servers (although many file-sharing programs have no central servers, in which case, consider the “server” shown here to be a virtual server that connects multiple user computers). The client software sends the server a list of files in the user’s library that other users can then search for and download—these files can be anything from MP3 songs to Microsoft Word documents or program files.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The host posts the list in a database where other users can search it. The server lists the libraries for hundreds of users, but all files found in those libraries remain on the computers of the other users.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;데이터베이스?&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Another client enters a search term. This can be file metadata, such as a band name or movie director, or any other phrase you would expect to be associated with the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;메타데이터?&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;The client looks at all the library records on the server and displays any titles that match at least some of the search criteria. The results include the names of the files, the type of Internet connection, &lt;strong&gt;Internet protocol (IP)&lt;/strong&gt; addresses of other clients making those files available, and other assorted trivia.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;인터넷 프로토콜(IP) -  IP 주소에 따라 다른 네트워크 간 패킷의 전송, 즉 경로 제어를 위한 규약으로 다른 네트워크 간의 데이터 전송을 가능하게 한다. 그러나 패킷이 발신된 순서대로 도착하는 것은 보증하지 않는다. 전송 제어 프로토콜(TCP) 또는 사용자 데이터그램 프로토콜(UDP)과 함께 사용한다.
[네이버 지식백과] 인터넷 프로토콜 [Internet Protocol] (IT용어사전, 한국정보통신기술협회)&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The user selects one or more of the files for transfer. His client software sends a message to the other client using its IP address. The message asks permission to download the song, and the remote client obliges by becoming a server and sending the file to the computer that asked for it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At the same time someone is downloading a file, other users are finding songs on that person’s hard drive and are downloading them. Several uploads/downloads can run simultaneously by taking turns sharing the Internet connections.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;how-clouds-encompass-us-all&quot;&gt;HOW CLOUDS ENCOMPASS US ALL&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Cloud&lt;/strong&gt; storage has two parts. The first—the &lt;strong&gt;front end&lt;/strong&gt;—is you or other computer users, all called clients, working at their PCs. Every time a client saves or opens a file, the request is passed to the &lt;strong&gt;back end&lt;/strong&gt;—an elaborate system that makes up the electronic clouds. Because the client’s files are saved in a cloud, the client does not have to be at an office or personal computer to retrieve them. With correct usernames and passwords, clients may retrieve their files on other computers, tablets, and smartphones to share them with others through a service such as Dropbox, Google Drive, or OneDrive.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;front end - client&lt;/li&gt;
  &lt;li&gt;back end - server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;구글드라이브를 통해 파일을 클라우드에 저장 해 두면, server를 통해 물리적인 기기에 제한 없이 자신의 파일에 접근 할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The client’s request first goes to a &lt;strong&gt;central server&lt;/strong&gt;, a computer responsible for managing all the traffic coming from hundreds or thousands of clients. To make sure all client requests are handled properly, the central server follows a set of rules, called &lt;strong&gt;protocols&lt;/strong&gt;, written to ensure there are no gaps, contradictions, or impossibilities embedded in the client request.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;다수의 클라이언트 - 하나의 서버(사실, 여러 개 일 수도)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;After the request passes the central server’s inspection, the server uses middleware software, so called because its digital turf lies between the clients and the legions of file servers whose purpose is to be repositories of whatever a client creates. With the demand for storage space so large and so immediate, a dedicated server for each client is impractical and, as we’ll see, not a good idea. But the middleware lets the storage system act as if the client does have a direct path to a dedicated, single-client server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이후는 그냥 읽어보자, 아~ 이런게 있구나~&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;At the same time the middleware pulls a trick on the numerous high-powered computers that make up the cloud—also called server farms—where the stored file resides. Because most of the servers are not running at full capacity, the central server uses empty storage space and otherwise idle processor time to create virtual computers. Each virtual computer operates as though it were the only computer on the farm. A neat juggling act of timing lets each virtual computer have its opportunity to send and receive information and get access to the server’s hard drives in the times when the other virtual servers are at rest.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the central server receives a request from a client to save a file, it may first encrypt the file to deter hackers who would break into the server’s farm to steal sensitive information. Then the central server consults a record of traffic and storage use among the hundreds of servers at more than one farm location. (Google is estimated to have 1 million servers.) A reputable cloud has twice the number of servers needed to store all of its clients’ file. In case of server malfunction, the cloud stores all of its data in more than one place and in more than one physical location. Doubling the number of servers and keeping copies—and sometimes copies of previous versions of a file—is referred to as &lt;strong&gt;redundancy&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;같은 파일을 저장하는 동일한 서버가 두 개 이상 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;In case of a major catastrophe, parts of the file may be distributed among several servers, making it more difficult for a file to be totally eradicated. Such a strategy was part of the original impetus for the Internet among the U.S. military, which wanted a redundant system of information in case some computer centers were taken out in a nuclear war. The system has also been cited as a way to ensure the distribution of information among insurgents otherwise censored by a repressive government.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Rocky Lim</name><email>rockylim@snu.ac.kr</email><uri>https://rockylim92.github.io/</uri></author><summary type="html">CIT 강의자료) Chapter20 - How we keep in touch the Internet way</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/hcw09_0.png" /></entry><entry><title type="html">How Computers Work [08]</title><link href="http://localhost:4000/book/hcw08/" rel="alternate" type="text/html" title="How Computers Work [08]" /><published>2017-11-04T21:00:00+09:00</published><updated>2017-11-04T21:00:00+09:00</updated><id>http://localhost:4000/book/hcw08</id><content type="html" xml:base="http://localhost:4000/book/hcw08/">&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw.jpg&quot; alt=&quot;Drawing&quot; style=&quot;width: 380px;&quot; /&gt;
&lt;/p&gt;

&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#how-a-browser-opens-pages&quot; id=&quot;markdown-toc-how-a-browser-opens-pages&quot;&gt;How a browser opens pages&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#dnsdomain-name-serversystem&quot; id=&quot;markdown-toc-dnsdomain-name-serversystem&quot;&gt;DNS(Domain Name Server(System))?&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#how-dns-works&quot; id=&quot;markdown-toc-how-dns-works&quot;&gt;How DNS Works?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#how-a-browser-displays-web-pages&quot; id=&quot;markdown-toc-how-a-browser-displays-web-pages&quot;&gt;How a browser displays web pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h1 id=&quot;how-a-browser-opens-pages&quot;&gt;How a browser opens pages&lt;/h1&gt;

&lt;p&gt;“A website is a collection of files, text, and media that someone has made generally available to others through the Internet. “&lt;/p&gt;

&lt;p&gt;웹페이지 간의 이동은&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;텍스트, 또는 이미지 등과 같은 하이퍼링크(Hyperlink)를 통해서&lt;/li&gt;
  &lt;li&gt;URL(Universal Resouce Locator)를 브라우저의 address창에 입력하는 것.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위 두 가지를 통해 가능하다.&lt;/p&gt;

&lt;p&gt;브라우저에서 하이퍼 링크를 클릭하거나 특정 address를 입력한다면, 브라우저 프로그램은 해당하는 address를 네트워크를 통해 DNS(Domain Name Server)에 보낸다.&lt;/p&gt;

&lt;h2 id=&quot;dnsdomain-name-serversystem&quot;&gt;DNS(Domain Name Server(System))?&lt;/h2&gt;
&lt;p&gt;호스트의 도메인 이름(human readable)을 호스트의 네트워크 주소(computer readable)로 바꾸어 주거나 그 반대의 변환을 수행할 수 있도록 해 주는 서버 또는 시스템.
특정 컴퓨터(또는 네트워크로 연결된 임의의 장치)의 주소를 찾기위해, 사람이 이해하기 쉬운 도메인 이름을 숫자로 된 식별 변호(IP 주소)로 변환 해 준다. 예를 들어, www.dcslab.snu.ac.kr 와 같은 컴퓨터 도메인 이름을 192.108.1.4와 같은 주소로 변환하고, 라우팅 정보를 제공하는 데이터베이스 시스템&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw08_1.png&quot; alt=&quot;Drawing&quot; style=&quot;width: 600px;&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;how-dns-works&quot;&gt;How DNS Works?&lt;/h2&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw08_2.png&quot; alt=&quot;Drawing&quot; style=&quot;width: 600px;&quot; /&gt;
&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;web browser에 주소를 입력한다.&lt;/li&gt;
  &lt;li&gt;만약 www.micosoft.com을 입력한다면, 입력 값이 위와 같이 이동한다.
    &lt;ol&gt;
      &lt;li&gt;DNS 서버&lt;/li&gt;
      &lt;li&gt;루트 DNS서버&lt;/li&gt;
      &lt;li&gt;.com DNS서버&lt;/li&gt;
      &lt;li&gt;Microsoft.com DNS서버&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;각각의 DNS서버를 차례대로 이동하며 해당 웹 사이트의 ip주소를 찾는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;DNS Server: 웹 서버 주소에 해당하는 ip주소 테이블을 저장하고 있는 컴퓨터&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw08_3.png&quot; alt=&quot;Drawing&quot; style=&quot;width: 600px;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;위에서 설정하는 DNS서버 주소는 Local DNS 서버 주소 라고 생각하면 된다.&lt;/p&gt;

&lt;h1 id=&quot;how-a-browser-displays-web-pages&quot;&gt;How a browser displays web pages&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Stored on the server, the web page itself consists of an HTML text file. HTML is a collection of codes enclosed in angle brackets—&amp;lt;&amp;gt;—that control the formatting of text in the file.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTML Code는 텍스트 뿐 아니라 이미지나 영상, 음성 파일등 서버에서 저장할 수 있는 대부분의 파일들을 포함 할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;특정 웹페이지를 보기 위해서 Client가 원하는 웹페이지의 주소를 해당 서버로 보내면 해당 서버는 HTML Code를 return 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;동시에 서버는 HTML 코드에 있는 이미지, 영상 등의 파일을 Client로 보내도록 명령한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트는 HTML 코드와 이미지, 영상과 같은 파일을 RAM에 캐싱한다.(크롬 브라우저가 메모리를 많이 사용하는 대신 빠른 이유) 나중에 브라우저가 전에 보았던 웹 페이지나 이미지, 영상을 다시 볼때는 서버에 다시 요청하는 것이 아니라 RAM에 캐싱되어 있던 부분에서 가져온다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;브라우저는 서버로 부터 받은 HTML, 텍스트, 이미지, 영상들을 합하여 웹 페이지를 재 구성하여 화면에 배치할 위치를 결정한다(HTML코드를 따라서). 웹페이지의 모든 구성요소가 동시에 Client로 도착하는 것은 아니기 때문에 가장 간단한 요소인 텍스트가 일반적으로 가장 먼저 표시되고 그 이후에 이미지나 영상이 보여진다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw08_4.png&quot; alt=&quot;Drawing&quot; style=&quot;width: 600px;&quot; /&gt;
&lt;/p&gt;</content><author><name>Rocky Lim</name><email>rockylim@snu.ac.kr</email><uri>https://rockylim92.github.io/</uri></author><summary type="html">CIT 강의자료) Chapter19 - How the Web Puts It All at Your Fingertips</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/hcw08_0.png" /></entry><entry><title type="html">How Computers Work [07]</title><link href="http://localhost:4000/book/hcw07/" rel="alternate" type="text/html" title="How Computers Work [07]" /><published>2017-11-04T19:00:00+09:00</published><updated>2017-11-04T19:00:00+09:00</updated><id>http://localhost:4000/book/hcw07</id><content type="html" xml:base="http://localhost:4000/book/hcw07/">&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw.jpg&quot; alt=&quot;Drawing&quot; style=&quot;width: 380px;&quot; /&gt;
&lt;/p&gt;

&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-what-is-broadband&quot; id=&quot;markdown-toc-1-what-is-broadband&quot;&gt;1. What is BroadBand?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2네트워크-속도에-영향을-미치는-요소들&quot; id=&quot;markdown-toc-2네트워크-속도에-영향을-미치는-요소들&quot;&gt;2.네트워크 속도에 영향을 미치는 요소들&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#reason-1-latency&quot; id=&quot;markdown-toc-reason-1-latency&quot;&gt;REASON 1: Latency.&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reason-2-use-of-wireless&quot; id=&quot;markdown-toc-reason-2-use-of-wireless&quot;&gt;REASON 2: Use of wireless.&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reason-3-malware&quot; id=&quot;markdown-toc-reason-3-malware&quot;&gt;REASON 3: Malware.&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reason-4-application-overload&quot; id=&quot;markdown-toc-reason-4-application-overload&quot;&gt;REASON 4: Application overload.&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reason-5-overloaded-router-or-modem&quot; id=&quot;markdown-toc-reason-5-overloaded-router-or-modem&quot;&gt;REASON 5: Overloaded router or modem.&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reason-6-weather-and-wireless-interference&quot; id=&quot;markdown-toc-reason-6-weather-and-wireless-interference&quot;&gt;REASON 6: Weather and wireless interference.&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reason-7-traffic-load&quot; id=&quot;markdown-toc-reason-7-traffic-load&quot;&gt;REASON 7: Traffic load:&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#latency-vs-bandwidth&quot; id=&quot;markdown-toc-latency-vs-bandwidth&quot;&gt;Latency VS Bandwidth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h1 id=&quot;1-what-is-broadband&quot;&gt;1. What is BroadBand?&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;“광대역 네트워크”&lt;/strong&gt; broad band를 바라보는 입장에 따라 여러가지 의미로 해석 될 수 있지만, 일반 사용자에게 broad band network란 2000년도 경 이후 초고속 인터넷을 말함&lt;/p&gt;

&lt;p&gt;조금 더 자세히 알아보면,  베이스 밴드와의 비교가 필요함.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;베이스 밴드&lt;/strong&gt;: 데이터를 전송할 때, 디지털 신호를 따로 추가적인 처리하지 않고 그대로 보낸다. 즉, 디지털 신호를 전송 매체에 그대로 실어 전송하는 방식.
EX) 유선 Local Network&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;브로드밴드&lt;/strong&gt;: 하나의 단일 링크(여기서 링크는 node to node)를 통해 복수의 전송 채널을 사용할 수 있다. 각 채널은 서로 다른 주파수에서 이루어지기 때문에 서로 방해하지 않는다. &lt;em&gt;하나의 전송 매체로 음성, 데이터, 영상 등을 포함한 멀티미디어 서비스를 제공할 수 있다&lt;/em&gt;
EX) VoIP(인터넷을 통해 전화할 수 있는 기술), IPTV(인터넷 망을 이용한 양방향 TV 서비스)&lt;/p&gt;

&lt;h1 id=&quot;2네트워크-속도에-영향을-미치는-요소들&quot;&gt;2.네트워크 속도에 영향을 미치는 요소들&lt;/h1&gt;

&lt;h2 id=&quot;reason-1-latency&quot;&gt;REASON 1: Latency.&lt;/h2&gt;

&lt;p&gt;(좋은 설명)Latency is idling time. Your car may be able to go 200 mph on a straightaway, but that doesn’t mean you’ll drive the 200 miles from Houston to San Antonio in an hour. You’ll have to sit still, engine idling, at stop signs, yields, train crossings, red lights, and school crossings. At best, legally, you’ll be able to drive 70 mph because of a roadway latency called a speed limit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;얼마나 빨라질 수 있을까?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Light in empty space requires roughly 5 ms to travel 1,000 miles&lt;/li&gt;
  &lt;li&gt;it takes 7.5ms data to travel 1,000 miles in fiber optic to = 광섬유 내에서의 굴절 때문에 더 길어짐&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reason-2-use-of-wireless&quot;&gt;REASON 2: Use of wireless.&lt;/h2&gt;
&lt;p&gt;Wi-Fi has more latency and is more susceptible to radio interference than a wired Ethernet connection.&lt;/p&gt;

&lt;h2 id=&quot;reason-3-malware&quot;&gt;REASON 3: Malware.&lt;/h2&gt;
&lt;p&gt;A network worm or virus that interferes with a computer’s network interface steals performance time, if nothing else&lt;/p&gt;

&lt;p&gt;DDos(Distributed Denial of Service) - 가장 대표적이고 강력한 사이버 공격, 매우 간단하다. - 여러 대의 컴퓨터에서 한 웹 서버에 비정상적인 트래픽을 흘려보내 웹 서버가 과도한 트래픽 소모 및 프로세스 진행, 과도한 입출력등을 통해 서버가 먹통이 되게 만드는 기본적인 서버 공격방법.&lt;/p&gt;

&lt;p&gt;F5버튼만 누르는 행위도  일종의 DDos공격. 물론 혼자서 해서는 여러 대의 컴퓨터라는 정의에 맞지 않기 때문에 단순 DoS 공격일 뿐이고 조직적으로 어떤 시간대에 동시에 F5키를 연타하면 DDoS라고 부르는 것이 가능하다&lt;/p&gt;

&lt;p&gt;대부분 좀비 pc를 활용하여 공격하는 방식으로 이루어진다.&lt;/p&gt;

&lt;h2 id=&quot;reason-4-application-overload&quot;&gt;REASON 4: Application overload.&lt;/h2&gt;
&lt;p&gt;Running other applications while you’re surfing slows transmission times by competing with your browser for the CPU’s attention.&lt;/p&gt;

&lt;p&gt;브라우저를 통해서 네트워크에 접속하는 경우)
브라우저 역시 응용프로그램 중 하나이다 -&amp;gt; series of instructions
여러 프로그램을 동시에 실행하는 경우 instruction의 총 개수는 많아지지만 cpu가 시간당 처리할 수 있는  instruction의 양은 정해져있다.
결국 인터넷 창을 많이 키거나 동시에 여러 프로그램을 실행시키면 느려진다.&lt;/p&gt;

&lt;h2 id=&quot;reason-5-overloaded-router-or-modem&quot;&gt;REASON 5: Overloaded router or modem.&lt;/h2&gt;
&lt;p&gt;If you’re not the only one in your household connected to the Internet, your communications may take twice as long—or longer—as you wait others’ requests to be processed.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw07_1.jpg&quot; alt=&quot;Drawing&quot; style=&quot;width: 600px;&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;reason-6-weather-and-wireless-interference&quot;&gt;REASON 6: Weather and wireless interference.&lt;/h2&gt;
&lt;p&gt;After your signals leave your location, they still have to fight their way through corruption caused by weather and electrical noise, forcing computers on either end of a connection to ask that damaged packets be re-sent.&lt;/p&gt;

&lt;p&gt;비오는날 인터넷이 느려진다? 미신이 아니라 사실
노후화된 선로나 전선의 피복이 벗겨져 외부 환경에 노출된 케이블의 경우 수분 또는 습기가 선 내부로 침투하게 되어 노이즈를 발생시킨다. 발생된 노이즈로 인해 느려질 수 있다.&lt;/p&gt;

&lt;p&gt;노이즈가 왜 네트워크를 느리게 할 까? Hind = ECC&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.naver.com/PostView.nhn?blogId=tomogirl4507&amp;amp;logNo=120122888315&quot;&gt;http://blog.naver.com/PostView.nhn?blogId=tomogirl4507&amp;amp;logNo=120122888315&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;reason-7-traffic-load&quot;&gt;REASON 7: Traffic load:&lt;/h2&gt;
&lt;p&gt;During parts of the day when more people are on the Internet, they create a usage spike that feeds a data traffic jam. If you are connected to heavily used sites, such as a multiplayer online game or popular websites, expect some lag.&lt;/p&gt;

&lt;h1 id=&quot;latency-vs-bandwidth&quot;&gt;Latency VS Bandwidth&lt;/h1&gt;

&lt;p&gt;한 쪽에서 반대쪽으로 데이터를 얼마나 많이 옮길수 있는가에 대한 개념이 Bandwidth이다. 네트워크 속도와 매우 밀접한 관련이 있음.&lt;/p&gt;

&lt;p&gt;For example, imagine two ships traveling from San Francisco to Japan:&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw07_2.jpg&quot; alt=&quot;Drawing&quot; style=&quot;width: 600px;&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ship A carries 3,000 tons traveling at a steady 40 knots.&lt;/li&gt;
  &lt;li&gt;Ship B is half as fast, traveling at 20 knots&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, Ship B carries 15,000 tons, so it has the greater bandwidth. If each of the ships had to transport 100,000 tons, it would take Ship A 366 days to move all the material. Ship B would finish the job sooner, in 150 days, not because Ship B is faster—it’s not—but because it has a broader bandwidth (it carries more).&lt;/p&gt;

&lt;p&gt;하지만 Ship B는 15000tons를 한 번에 운반한다. 그렇기 때문에 더 큰 bandwidth를 갖는다. 만약 두 배가 100,000tons의 화물을 운반해야 한다면, ship A는 366일 정도가 걸릴 것이고, ship B 는 150일 정도면 화물을 다 옮길 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;ship B의 더 속도가 빠른 것 때문에 아니라 bandwidth가 더 크기 때문에, 전체 처리하는 일의 양이 더 크다고 볼 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;네트워크 뿐 아니라 PC안에서도 processor, Disk, System Bus, Video Card등은 모두 bandwidth를 갖고있다.&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Rocky Lim</name><email>rockylim@snu.ac.kr</email><uri>https://rockylim92.github.io/</uri></author><summary type="html">CIT 강의자료) Chapter 18 - How the Internet Bring us the Internet</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/hcw07_0.png" /></entry><entry><title type="html">How Computers Work [06]</title><link href="http://localhost:4000/book/hcw06/" rel="alternate" type="text/html" title="How Computers Work [06]" /><published>2017-09-28T19:00:00+09:00</published><updated>2017-09-28T19:00:00+09:00</updated><id>http://localhost:4000/book/hcw06</id><content type="html" xml:base="http://localhost:4000/book/hcw06/">&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw.jpg&quot; alt=&quot;Drawing&quot; style=&quot;width: 380px;&quot; /&gt;
&lt;/p&gt;

&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#chapter-11&quot; id=&quot;markdown-toc-chapter-11&quot;&gt;Chapter 11&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#lanlocal-area-network&quot; id=&quot;markdown-toc-lanlocal-area-network&quot;&gt;LAN(Local Area Network)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#wwwworld-wide-web&quot; id=&quot;markdown-toc-wwwworld-wide-web&quot;&gt;WWW(world wide web)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#packer-and-network&quot; id=&quot;markdown-toc-packer-and-network&quot;&gt;packer and network&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;
&lt;p&gt;i&lt;/p&gt;
&lt;h1 id=&quot;chapter-11&quot;&gt;Chapter 11&lt;/h1&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw06_1.jpg&quot; alt=&quot;Drawing&quot; style=&quot;width: 600px;&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;lanlocal-area-network&quot;&gt;LAN(Local Area Network)&lt;/h2&gt;
&lt;p&gt;개념적 의미는 물리적으로 연결되어 있는 여러대의 pc, server등을 말함. node끼리의 물리적 연결은 cable, 광섬유, 구리선, 라디오 시그널이나 적외선 또한 포함한다.&lt;/p&gt;

&lt;p&gt;LAN에서 어떤 기술을 사용하던 간에, 궁극적인 목표는 data을 한 node에서 다른 node로 전송하기 위함(+빠르고, 안정적이고, 싼 값에). 여기서 data는 단순한 정보 일 수도 있고, &lt;strong&gt;데이터에 대한 요청(request), 그에 대한 reply&lt;/strong&gt;일 수 있다. 또한 네트워크 상으로 연결된 어떤 프로그램에 대한 instruction 일 수도 있다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw06_2.png&quot; alt=&quot;Drawing&quot; style=&quot;width: 600px;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;대부분의 네트크 상의node들은 client server 관계로 연결되어 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;client&lt;/strong&gt; - server에 request를 보내는 node(pc, 또다른 server가 될 수도 있음)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;file server&lt;/strong&gt; - which is a specialized computer with multiple large hard drives that are not used exclusively by any individual on the network.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;internet server&lt;/strong&gt; - WWW(world wide web)에 LAN에 속해 있는 node들이 접속할 수 있도록 도와주는 server. ISP(Internet Service Provider, 우리나라는 KT, 하나로통신 등이 있음)에서 이 서버를 운영하고 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw06_3.png&quot; alt=&quot;Drawing&quot; style=&quot;width: 600px;&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;peer-to-peer network(p2p, p to p)&lt;/strong&gt; - client-server 네트워크 모델과는 다른 네트워크 연결 방식, 각 node는 client를 거치지 않고 직접 연결되어 있으며, 토렌트, 웹하드, 등이 있다. 최근 모바일 기기, iot기기가 많이 등장하면서 일상생활 곳곳에 사용되는 네트워크 연결 방식. &lt;strong&gt;직접 연결된 peer사이에는 다시 client-server 모델이 적용된다.&lt;/strong&gt; ex) 맥-iphone,&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wwwworld-wide-web&quot;&gt;WWW(world wide web)&lt;/h2&gt;

&lt;p&gt;월드 와이드 웹(World Wide Web, WWW, W3)은 인터넷에 연결된 컴퓨터들을 통해 사람들이 정보를 공유할 수 있는 전 세계적인 정보 공간을 말한다. 간단히 웹(Web)이라 부르는 경우가 많다. 이 용어는 인터넷과 동의어로 쓰이는 경우가 많으나 엄격히 말해 서로 다른 개념이다. 웹은 전자 메일과 같이 인터넷 상에서 동작하는 하나의 서비스일 뿐이다&lt;/p&gt;

&lt;p&gt;인터넷상의 정보를 하이퍼텍스트 방식과 멀티미디어 환경에서 검색할 수 있게 해주는 정보검색 시스템이다. 하이퍼텍스트 형식으로 표현된 인터넷상의 다양한 정보를 효과적으로 검색하는 시스템으로 전 세계적으로 가장 널리 보급되어 있다&lt;/p&gt;

&lt;p&gt;하이퍼텍스트는 웹 브라우저라 불리는 프로그램을 통해 웹 서버에서 “문서”나 웹 페이지등의 정보 조각을 읽어들여 컴퓨터 모니터에 출력하는 형태로 보이게 된다. 그러고 나서 사용자는 각 페이지에 있는 하이퍼링크를 따라 다른 문서로 이동하거나, 그 페이지를 서비스하고 있는 서버로 일련의 정보를 보낼 수도 있다. 하이퍼링크를 따라 이동하는 행위를 흔히 웹 서핑(web surfing, 문화어: 망유람[2]) 또는 웹 브라우징이라 한다. 그리고 관련된 내용들이 모여있는 웹 페이지들의 집합을 웹 사이트라 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/월드_와이드_웹&quot;&gt;https://ko.wikipedia.org/wiki/월드_와이드_웹&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;packer-and-network&quot;&gt;packer and network&lt;/h2&gt;

&lt;p&gt;네트워크를 통해 각 node는 다른 node에게 &lt;strong&gt;packet&lt;/strong&gt;의 형태로 데이터를 전송한다. packet의 구성은 다음과 같이 &lt;strong&gt;매우 간단하게&lt;/strong&gt; 나누어 볼 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Preamble - Synchronizes the network nodes
““나 지금부터 packet 보낼거야~””, &lt;strong&gt;101010101 또는 010101010&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Destination Address—A single PC or all PCs on a network&lt;/li&gt;
  &lt;li&gt;Source Address—The address of the computer from which the packet originated&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;network address란?&lt;br /&gt;
인터넷 상에 존재하는 호스트 들을 구분하기 위한 32비트 주소 체계. 일반적으로 다음고 같이 점이 찍혀진 10진수를 사용하여 표현한다.&lt;br /&gt;
&lt;strong&gt;192.168.0.12&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Type—Defines the format used for the data&lt;/li&gt;
  &lt;li&gt;Data—The actual information&lt;/li&gt;
  &lt;li&gt;CRC—Cyclical Redundancy Check, which is used to spot transmission errors&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;어떻게-주소로-길을-찾아가지&quot;&gt;어떻게 주소로 길을 찾아가지?&lt;/h3&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw06_4.jpg&quot; alt=&quot;Drawing&quot; style=&quot;width: 600px;&quot; /&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
	&lt;img src=&quot;http://localhost:4000/images/hcw06_5.png&quot; alt=&quot;Drawing&quot; style=&quot;width: 600px;&quot; /&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;라우터 - 라우터(router[a], 문화어: 경로기) 혹은 라우팅 기능을 갖는 공유기는 패킷의 위치를 추출하여, 그 위치에 대한 최적의 경로를 지정하며, 이 경로를 따라 데이터 패킷을 다음 장치로 전향시키는 장치이다. 이때 최적의 경로는 일반적으로는 가장 빠르게 통신이 가능한 경로이므로, 이것이 최단 거리 일수도 있지만, 돌아가는 경로라도 고속의 전송로를 통하여 전달이 되는 경로가 될 수 있다. 간단히 말해 서로 다른 내트워크 간에 중계 역할을 해준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;스위치(switch) -  작은 라우터, 기능은 같음.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;hub - 병목현상(bottle neck)을 해결하기 위함, 메모리 버퍼를 가지고 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Rocky Lim</name><email>rockylim@snu.ac.kr</email><uri>https://rockylim92.github.io/</uri></author><summary type="html">CIT 강의자료) Chapter 17 - How Network Tie Computer Togethe</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/images/hcw06_0.png" /></entry></feed>